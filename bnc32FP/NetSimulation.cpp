//файл:			NetSimulation.cpp
//описание:		модуль, моделирующий работу нейронной сети
//дата:			01.03.2007

#include "NetSimulation.h"
#include "ncmath.h"

// ConnectionArray_Layer_1 и ConnectionArray_Layer_2 - массивы, описывающие таблицу связей
// входов и нейронов первого и второго слоёв. 
// ConnectionArray_Layer_1 - таблица связей первого слоя. Первые 24 элемента - коэффициенты
// первого нейрона, ..., последние 24 элемента - коэффициенты последнего нейрона. Всего 
// 256 нейронов, 416 входных коэффициентов (коэффициенты Фурье). На каждый нейрон 
// поступает 24-х элементный вектор входа
// ConnectionArray_Layer_2 - таблица связей второго слоя. Первые 16 элементов - 
// коэффициенты первого нейрона, ..., последние 16 элементов - коэффициенты последнего 
// нейрона. Всего 256 нейронов и 256 входных коэффициентов (выходы нейронов первого слоя). 
// На каждый нейрон поступает 16-ти элементный вектор входа
const short ConnectionArray_Layer_1[] = {
		0,   1,   205, 316, 278, 315, 289, 218, 242, 358, 263, 296, 413, 48,  248, 219, 37,  16,  327, 47,  304, 110, 190, 63, 
		2,   3,   401, 378, 252, 133, 309, 415, 212, 1,   257, 300, 339, 97,  381, 365, 356, 73,  351, 161, 370, 379, 111, 238, 
		4,   5,   6,   173, 159, 151, 319, 384, 399, 205, 134, 16,  18,  190, 156, 48,  244, 10,  63,  298, 128, 102, 200, 336, 
		6,   7,   124, 328, 48,  304, 374, 58,  329, 279, 314, 256, 207, 275, 245, 327, 206, 227, 119, 186, 300, 57,  290, 29, 
		8,   9,   58,  258, 53,  7,   221, 172, 332, 11,  236, 259, 353, 339, 234, 2,   397, 383, 368, 367, 178, 24,  306, 149, 
		10,  11,  82,  185, 336, 88,  364, 161, 255, 400, 402, 146, 132, 248, 270, 271, 145, 333, 368, 2,   217, 352, 274, 361, 
		12,  13,  139, 394, 314, 289, 60,  59,  53,  80,  360, 225, 23,  216, 51,  146, 171, 195, 324, 133, 24,  396, 228, 199, 
		14,  15,  347, 152, 0,   132, 130, 355, 384, 311, 337, 308, 194, 313, 165, 392, 116, 128, 375, 374, 264, 172, 379, 365, 
		16,  17,  258, 251, 265, 104, 377, 240, 88,  85,  388, 195, 40,  101, 105, 313, 298, 292, 67,  358, 364, 169, 122, 63, 
		18,  19,  357, 312, 130, 247, 413, 356, 131, 194, 346, 400, 347, 174, 47,  412, 320, 285, 112, 198, 124, 193, 225, 394, 
		20,  21,  352, 367, 218, 81,  20,  115, 334, 380, 348, 378, 47,  125, 26,  204, 144, 207, 65,  263, 277, 276, 119, 202, 
		22,  23,  371, 260, 235, 341, 113, 305, 219, 334, 39,  266, 137, 192, 4,   85,  6,   7,   283, 230, 112, 71,  147, 149, 
		24,  25,  373, 400, 178, 301, 186, 289, 132, 246, 350, 243, 241, 0,   199, 49,  253, 54,  47,  299, 1,   341, 158, 332, 
		26,  27,  261, 72,  67,  92,  187, 415, 38,  295, 352, 113, 24,  172, 163, 308, 160, 105, 342, 101, 314, 132, 234, 133, 
		28,  29,  215, 120, 191, 216, 318, 412, 388, 221, 177, 165, 389, 210, 356, 127, 125, 91,  393, 301, 131, 242, 93,  81, 
		30,  31,  400, 291, 369, 135, 144, 16,  354, 198, 197, 202, 133, 316, 74,  147, 93,  226, 170, 181, 278, 304, 116, 123, 
		32,  33,  273, 370, 266, 404, 332, 407, 224, 130, 289, 127, 164, 225, 105, 177, 155, 11,  280, 59,  313, 327, 282, 316, 
		34,  35,  238, 246, 166, 350, 301, 247, 45,  366, 114, 162, 171, 28,  97,  137, 143, 84,  353, 354, 249, 140, 326, 169, 
		36,  37,  115, 191, 334, 366, 409, 209, 307, 51,  196, 215, 105, 267, 283, 373, 315, 262, 213, 44,  49,  301, 168, 13, 
		38,  39,  52,  354, 184, 340, 276, 245, 347, 346, 62,  213, 319, 7,   139, 263, 408, 382, 219, 105, 6,   189, 49,  41, 
		40,  41,  166, 156, 14,  204, 308, 359, 144, 174, 75,  408, 264, 146, 349, 32,  269, 241, 376, 384, 369, 268, 385, 172, 
		42,  43,  117, 366, 29,  287, 18,  325, 145, 409, 176, 333, 374, 412, 296, 184, 354, 69,  94,  32,  78,  318, 210, 351, 
		44,  45,  73,  328, 159, 8,   40,  217, 213, 174, 103, 250, 269, 355, 0,   25,  191, 78,  182, 95,  135, 315, 301, 42, 
		46,  47,  92,  151, 227, 397, 141, 62,  150, 212, 390, 313, 102, 258, 402, 250, 401, 240, 74,  208, 298, 18,  106, 187, 
		48,  49,  314, 198, 295, 401, 281, 151, 57,  119, 25,  94,  22,  374, 241, 96,  399, 251, 256, 298, 177, 320, 191, 414, 
		50,  51,  240, 118, 59,  127, 135, 144, 294, 145, 158, 323, 201, 103, 146, 126, 161, 206, 375, 314, 2,   204, 273, 330, 
		52,  53,  61,  350, 93,  356, 89,  31,  324, 239, 242, 177, 18,  158, 26,  91,  268, 171, 88,  308, 229, 189, 361, 380, 
		54,  55,  116, 236, 277, 281, 176, 235, 120, 85,  284, 264, 288, 160, 207, 292, 83,  39,  185, 138, 92,  128, 14,  314, 
		56,  57,  186, 198, 395, 344, 68,  239, 2,   50,  408, 13,  141, 313, 415, 224, 98,  28,  369, 314, 394, 153, 6,   101, 
		58,  59,  411, 394, 147, 391, 388, 155, 29,  13,  336, 274, 88,  279, 330, 68,  145, 226, 225, 238, 257, 95,  361, 177, 
		60,  61,  267, 90,  5,   1,   232, 221, 413, 280, 198, 312, 177, 217, 95,  156, 170, 37,  201, 300, 199, 244, 225, 270, 
		62,  63,  332, 162, 239, 84,  367, 246, 176, 56,  74,  120, 168, 286, 294, 12,  127, 250, 52,  341, 88,  226, 307, 378, 
		64,  65,  243, 125, 188, 3,   193, 148, 92,  287, 267, 310, 116, 257, 94,  45,  108, 359, 21,  146, 384, 389, 55,  112, 
		66,  67,  124, 397, 301, 89,  170, 215, 395, 285, 115, 90,  347, 355, 236, 394, 328, 175, 50,  211, 40,  282, 20,  149, 
		68,  69,  250, 93,  290, 393, 31,  110, 168, 414, 91,  361, 328, 408, 155, 187, 310, 245, 255, 257, 94,  252, 236, 177, 
		70,  71,  408, 277, 160, 218, 155, 24,  357, 298, 308, 371, 129, 8,   368, 31,  201, 339, 5,   275, 199, 318, 231, 169, 
		72,  73,  75,  120, 172, 212, 184, 246, 354, 103, 66,  7,   123, 50,  152, 351, 60,  146, 230, 89,  367, 375, 203, 247, 
		74,  75,  182, 22,  230, 119, 147, 235, 52,  217, 314, 238, 62,  101, 338, 264, 346, 122, 285, 356, 372, 139, 229, 358, 
		76,  77,  376, 120, 385, 27,  54,  24,  392, 122, 304, 261, 66,  377, 398, 22,  9,   213, 28,  129, 354, 282, 324, 64, 
		78,  79,  288, 334, 136, 172, 355, 145, 373, 26,  365, 208, 203, 239, 23,  150, 264, 14,  5,   148, 284, 371, 248, 250, 
		80,  81,  106, 201, 62,  153, 185, 222, 181, 331, 79,  380, 101, 315, 76,  374, 7,   84,  286, 63,  90,  67,  4,   135, 
		82,  83,  209, 186, 387, 109, 93,  25,  393, 331, 312, 401, 160, 125, 283, 87,  175, 71,  321, 144, 89,  253, 116, 47, 
		84,  85,  218, 17,  271, 221, 213, 347, 383, 261, 370, 76,  132, 382, 303, 279, 129, 2,   284, 295, 266, 154, 12, 178, 
		86,  87,  105, 88,  305, 397, 388, 310, 407, 250, 173, 195, 75,  361, 127, 53,  294, 208, 74,  37,  72,  111, 159, 32, 
		88,  89,  232, 33,  380, 414, 365, 11,  1,   166, 309, 407, 65,  241, 331, 390, 204, 156, 413, 172, 291, 412, 324, 223, 
		90,  91,  26,  286, 249, 305, 23,  414, 32,  190, 163, 237, 296, 128, 350, 303, 260, 180, 365, 398, 220, 192, 100, 259, 
		92,  93,  276, 22,  64,  414, 35,  385, 290, 285, 343, 242, 45,  30,  13,  321, 41,  281, 312, 132, 23,  98,  335, 106, 
		94,  95,  135, 237, 288, 307, 278, 274, 245, 414, 103, 112, 268, 145, 382, 301, 259, 43,  379, 46,  147, 148, 177, 132, 
		96,  97,  106, 34,  211, 43,  370, 149, 130, 384, 321, 117, 408, 75,  386, 345, 326, 101, 158, 4,   335, 287, 204, 201, 
		98,  99,  84,  47,  74,  205, 290, 185, 210, 179, 328, 149, 223, 27,  371, 248, 298, 103, 222, 127, 85,  148, 336, 366, 
		100, 101, 164, 192, 57,  204, 142, 26,  395, 238, 396, 143, 108, 42,  226, 299, 55,  228, 347, 218, 393, 64,  134, 53, 
		102, 103, 254, 381, 233, 253, 315, 269, 105, 178, 283, 151, 126, 88,  402, 260, 319, 66,  317, 353, 411, 320, 235, 255, 
		104, 105, 162, 306, 19,  123, 100, 343, 237, 163, 87,  70,  10,  105, 333, 279, 223, 305, 262, 266, 144, 7, 171, 122, 
		106, 107, 305, 87,  98,  162, 272, 217, 262, 0,   335, 223, 239, 293, 119, 129, 327, 23,  89,  76,  394, 353, 25, 408, 
		108, 109, 154, 350, 115, 267, 281, 103, 178, 313, 233, 194, 58,  241, 361, 318, 50,  38,  356, 140, 52,  387, 8, 353, 
		110, 111, 409, 88,  133, 294, 66,  155, 174, 159, 341, 247, 181, 19,  221, 305, 113, 333, 299, 194, 367, 255, 412, 308, 
		112, 113, 199, 305, 132, 126, 341, 272, 161, 170, 48,  302, 80,  176, 89,  1,   215, 65,  297, 97,  9,   264, 179, 29, 
		114, 115, 298, 133, 207, 86,  30,  181, 2,   27,  234, 226, 250, 242, 227, 245, 366, 187, 343, 172, 25, 122, 314, 263, 
		116, 117, 49,  255, 361, 162, 405, 401, 253, 60,  315, 340, 85,  397, 204, 81,  251, 368, 357, 242, 55, 219, 1, 289, 
		118, 119, 195, 27,  254, 88,  323, 156, 120, 248, 322, 107, 185, 346, 321, 315, 289, 370, 181, 74, 345, 326, 333, 355, 
		120, 121, 202, 132, 142, 38,  300, 144, 233, 177, 195, 123, 153, 347, 67, 146,  129, 136, 25, 312, 205, 29, 362, 83, 
		122, 123, 141, 21,  60,  175, 351, 170, 152, 127, 153, 86,  338, 162, 369, 75,  238, 130, 378, 285, 276, 410, 314, 108, 
		124, 125, 77,  329, 350, 130, 317, 401, 198, 292, 378, 243, 190, 366, 266, 143, 186, 240, 268, 344, 390, 107, 348, 333, 
		126, 127, 97,  375, 85,  63,  255, 71,  91,  31,  95,  280, 154, 133, 344, 109, 50, 256, 116, 349, 76, 340, 40, 51, 
		128, 129, 192, 273, 15,  275, 413, 93,  411, 169, 118, 163, 128, 263, 404, 39,  146, 331, 54,  224, 197, 386, 408, 95, 
		130, 131, 29,  181, 4,   18,  246, 302, 136, 204, 264, 65,  42,  394, 269, 48,  160, 306, 301, 268, 360, 243, 36, 259, 
		132, 133, 55,  144, 178, 56,  142, 116, 337, 328, 70,  269, 120, 87,  7,   88,  126, 69,  306, 332, 157, 189, 309, 152, 
		134, 135, 91,  22,  41,  370, 386, 332, 339, 315, 161, 373, 330, 132, 304, 366, 187, 383, 119, 395, 92,  211, 194, 407, 
		136, 137, 263, 195, 177, 322, 354, 231, 152, 374, 219, 33,  226, 161, 246, 293, 299, 275, 50,  274, 57,  391, 164, 40, 
		138, 139, 187, 189, 163, 9,   393, 160, 320, 388, 114, 21,  193, 356, 362, 107, 142, 324, 358, 413, 319, 407, 338, 129, 
		140, 141, 398, 103, 274, 232, 352, 51,  335, 361, 261, 331, 63,  346, 204, 89,  252, 139, 190, 24,  250, 339, 223, 295, 
		142, 143, 363, 85,  76,  171, 188, 9,   221, 387, 297, 410, 299, 340, 240, 99,  18,  353, 359, 329, 246, 11,  277, 244, 
		144, 145, 52,  72,  23,  215, 261, 245, 189, 204, 368, 325, 127, 294, 385, 71,  201, 130, 148, 31,  225, 171, 222, 242, 
		146, 147, 373, 164, 5,   344, 356, 319, 34,  311, 285, 403, 83,  157, 44,  173, 378, 391, 107, 380, 336, 51,  49,  115, 
		148, 149, 340, 389, 17,  328, 20,  172, 343, 73,  22,  218, 241, 369, 178, 124, 9,   102, 231, 0,   339, 363, 197, 95, 
		150, 151, 37,  41,  10,  259, 390, 213, 392, 346, 374, 149, 367, 107, 347, 315, 146, 302, 63,  272, 326, 325, 98,  368, 
		152, 153, 87,  66,  135, 389, 405, 376, 236, 216, 48,  307, 110, 408, 298, 205, 215, 24,  387, 382, 52,  244, 27,  128, 
		154, 155, 243, 208, 56,  272, 415, 341, 165, 219, 258, 250, 94,  332, 333, 407, 161, 32,  275, 30,  146, 131, 130, 363, 
		156, 157, 231, 76,  199, 242, 396, 113, 269, 37,  2,   90,  273, 138, 266, 99,  163, 325, 7,   366, 359, 301, 158, 250, 
		158, 159, 304, 317, 411, 348, 314, 114, 263, 311, 279, 176, 358, 65,  236, 50,  108, 324, 209, 56,  341, 118, 201, 60, 
		160, 161, 354, 108, 241, 276, 66,  375, 25,  169, 306, 370, 391, 347, 93,  56,  238, 211, 143, 187, 75,  94,  107, 185, 
		162, 163, 25,  357, 326, 353, 182, 191, 381, 103, 193, 107, 380, 119, 360, 154, 246, 102, 228, 194, 21,  75,  260, 168, 
		164, 165, 190, 195, 108, 265, 81,  179, 361, 67,  61,  188, 244, 77,  256, 16,  214, 403, 164, 43,  194, 364, 314, 292, 
		166, 167, 151, 357, 387, 329, 47,  374, 391, 17,  333, 237, 378, 63,  34,  78,  116, 348, 315, 204, 82,  164, 147, 390, 
		168, 169, 367, 227, 346, 337, 21,  237, 184, 409, 208, 325, 255, 202, 398, 299, 268, 240, 405, 185, 103, 25,  28,  77, 
		170, 171, 339, 140, 403, 326, 265, 38,  233, 36,  385, 248, 319, 175, 316, 47,  260, 157, 300, 297, 226, 44,  79,  360, 
		172, 173, 134, 86,  49,  21,  269, 125, 402, 0,   335, 367, 260, 173, 41,  236, 129, 374, 69,  71,  34,  353, 52,  59, 
		174, 175, 264, 39,  139, 243, 404, 309, 217, 252, 79,  238, 247, 209, 271, 159, 192, 274, 34,  74,  363, 199, 331, 20, 
		176, 177, 74,  180, 344, 371, 375, 90,  170, 161, 218, 101, 182, 77,  339, 265, 314, 379, 131, 269, 372, 125, 88,  42, 
		178, 179, 122, 267, 152, 398, 334, 335, 333, 412, 56,  193, 214, 362, 341, 219, 186, 74,  360, 68,  279, 188, 251, 43, 
		180, 181, 218, 390, 29,  191, 245, 220, 173, 136, 130, 165, 25,  167, 103, 303, 2,   24,  257, 115, 62,  360, 0,   237, 
		182, 183, 232, 398, 106, 241, 136, 395, 196, 118, 183, 193, 139, 233, 235, 130, 122, 35,  270, 393, 206, 404, 25,  192, 
		184, 185, 224, 198, 128, 399, 215, 45,  209, 83,  402, 129, 333, 197, 347, 102, 284, 221, 191, 202, 323, 81,  339, 311, 
		186, 187, 382, 179, 391, 163, 329, 243, 406, 400, 18,  193, 250, 415, 221, 216, 46,  68,  344, 238, 20,  330, 59,  353, 
		188, 189, 117, 21,  125, 219, 162, 247, 111, 248, 56,  113, 109, 190, 309, 105, 154, 380, 233, 357, 69,  338, 30,  358, 
		190, 191, 258, 74,  327, 395, 217, 34,  381, 116, 364, 172, 79,  401, 286, 52,  167, 345, 306, 297, 241, 405, 359, 136, 
		192, 193, 159, 158, 116, 66,  52,  358, 311, 387, 251, 355, 58,  4,   132, 264, 11,  176, 325, 363, 382, 85,  254, 23, 
		194, 195, 405, 31,  322, 245, 230, 166, 281, 386, 342, 366, 152, 332, 232, 403, 313, 185, 141, 203, 35,  74, 276, 303, 
		196, 197, 224, 252, 372, 23,  154, 247, 366, 132, 126, 335, 24,  290, 306, 381, 283, 352, 20,  187, 227, 64, 189, 109, 
		198, 199, 379, 83,  395, 171, 134, 391, 194, 292, 94,  303, 132, 372, 127, 160, 342, 169, 179, 172, 361, 217, 208, 57, 
		200, 201, 136, 182, 396, 144, 314, 145, 267, 121, 414, 66,  212, 52,  65,  0,   288, 83,  171, 95,  321, 259, 385, 387, 
		202, 203, 315, 320, 41,  22,  64,  177, 167, 341, 264, 129, 361, 397, 377, 200, 392, 393, 302, 161, 252, 124, 344, 352, 
		204, 205, 122, 337, 50,  76,  158, 248, 123, 212, 29,  358, 252, 206, 188, 202, 150, 393, 214, 276, 297, 319, 173, 10, 
		206, 207, 382, 387, 55,  217, 40,  3,   414, 183, 365, 100, 187, 18,  129, 344, 294, 141, 19,  375, 316, 90,  337, 241, 
		208, 209, 256, 77,  105, 374, 391, 414, 40,  37,  34,  71,  214, 301, 246, 107, 151, 72,  402, 18,  298, 226, 80,  32, 
		210, 211, 16,  204, 326, 143, 283, 334, 56,  356, 193, 85,  309, 41,  294, 177, 3,   196, 102, 120, 219, 379, 48,  307, 
		212, 213, 182, 161, 296, 382, 125, 74,  232, 244, 197, 281, 134, 140, 150, 269, 390, 71,  85,  396, 251, 318, 137, 275, 
		214, 215, 100, 304, 295, 19,  196, 77,  218, 344, 249, 107, 224, 1,   392, 62,  143, 54,  25,  187, 292, 12,  228, 61, 
		216, 217, 299, 59,  0,   14,  415, 315, 185, 95,  217, 135, 342, 366, 390, 147, 43,  18,  120, 379, 222, 88,  193, 221, 
		218, 219, 195, 371, 287, 340, 320, 342, 223, 276, 133, 239, 81,  215, 83, 288, 27, 88, 61, 124, 275, 246, 300, 106, 
		220, 221, 109, 254, 329, 161, 0,   365, 392, 208, 135, 117, 353, 343, 110, 369, 324, 372, 403, 354, 289, 393, 245, 194, 
		222, 223, 115, 210, 301, 149, 82,  46,  65,  383, 283, 263, 133, 284, 7, 298, 113, 414, 409, 291, 246, 351, 188, 357, 
		224, 225, 307, 140, 58,  352, 178, 279, 393, 364, 379, 243, 210, 169, 202, 259, 269, 27, 80, 306, 411, 120, 30, 284, 
		226, 227, 194, 191, 50,  153, 154, 183, 62,  5,   64,  66,  303, 137, 104, 128, 378, 6, 205, 72, 380, 87, 291, 350, 
		228, 229, 260, 245, 358, 16,  130, 376, 62,  45,  386, 26,  87,  367, 363, 46, 356, 19, 295, 159, 74, 18, 259, 265, 
		230, 231, 273, 111, 36,  291, 130, 330, 244, 292, 379, 296, 350, 91,  247, 136, 323, 376, 134, 86, 47, 27, 264, 44, 
		232, 233, 80,  139, 231, 353, 112, 105, 415, 57,  10,  89,  162, 283, 6, 224, 197, 399, 298, 66, 392, 229, 147, 98, 
		234, 235, 100, 303, 281, 204, 248, 224, 363, 217, 57,  30,  364, 131, 149, 196, 8, 276, 38, 342, 402, 383, 225, 213, 
		236, 237, 48,  35,  93,  38,  287, 256, 220, 240, 242, 313, 63,  24,  274, 245, 383, 69, 297, 39, 412, 164, 276, 157, 
		238, 239, 315, 396, 222, 267, 88,  260, 16,  106, 261, 79,  39,  157, 165, 268, 182, 265, 52, 409, 390, 277, 366, 173, 
		240, 241, 134, 395, 411, 219, 21,  311, 58,  189, 296, 347, 348, 326, 102, 397, 124, 322, 236, 86, 32, 13, 135, 39, 
		242, 243, 157, 224, 56,  186, 123, 78,  297, 255, 213, 72,  1,   11,  70, 198, 116, 66, 272, 348, 380, 21, 4, 132, 
		244, 245, 381, 344, 47,  144, 109, 259, 181, 61,  190, 114, 227, 85,  31, 305, 185, 254, 391, 192, 14, 341, 46, 321, 
		246, 247, 58,  415, 4,   139, 39,  198, 121, 200, 229, 236, 220, 387, 95, 290, 282, 15, 310, 185, 228, 160, 40, 152, 
		248, 249, 340, 20,  103, 350, 264, 318, 387, 299, 70,  354, 138, 256, 308, 199, 200, 88, 400, 261, 368, 297, 159, 95, 
		250, 251, 40,  99,  280, 105, 117, 182, 387, 51,  48,  12,  0,   185, 135, 192, 298, 122, 246, 41, 338, 181, 83, 136, 
		252, 253, 259, 102, 111, 225, 250, 316, 232, 165, 285, 335, 81,  61,  177, 314, 84, 242, 352, 321, 267, 258, 333, 363, 
		254, 255, 409, 215, 143, 30,  44,  3,   103, 276, 74,  101, 308, 204, 392, 196, 11, 255, 170, 320, 246, 137, 40, 280, 
		256, 257, 375, 139, 108, 44,  292, 291, 252, 163, 404, 51,  115, 280, 378, 190, 355, 305, 398, 78, 155, 7, 341, 232, 
		258, 259, 183, 87,  160, 276, 180, 214, 361, 371, 301, 297, 295, 26,  323, 59, 43, 264, 262, 324, 78, 338, 14, 260, 
		260, 261, 212, 296, 390, 280, 72,  89,  341, 286, 388, 373, 213, 297, 10, 385, 211, 377, 317, 99, 185, 41, 8, 240, 
		262, 263, 411, 138, 62,  179, 343, 49,  28,  127, 211, 305, 84,  220, 135, 252, 115, 148, 68, 12, 145, 309, 342, 230, 
		264, 265, 180, 399, 260, 225, 19,  341, 330, 231, 258, 47,  299, 59,  132, 133, 391, 329, 112, 356, 102, 22, 39, 69, 
		266, 267, 28,  375, 47,  346, 75,  334, 205, 54,  183, 370, 279, 93,  141, 300, 308, 232, 10, 220, 154, 99, 312, 14, 
		268, 269, 149, 355, 49,  221, 384, 222, 162, 366, 266, 207, 229, 71,  201, 415, 228, 169, 284, 311, 210, 247, 260, 231, 
		270, 271, 42,  156, 71,  410, 188, 230, 307, 229, 6,   400, 61,  128, 337, 223, 3, 402, 269, 238, 200, 68, 187, 106, 
		272, 273, 249, 107, 188, 335, 334, 406, 79,  121, 385, 139, 333, 397, 231, 311, 58, 401, 351, 5, 129, 199, 6, 98, 
		274, 275, 316, 403, 128, 234, 117, 166, 332, 334, 81,  120, 318, 54,  309, 138, 278, 357, 150, 356, 313, 385, 248, 383, 
		276, 277, 353, 175, 101, 410, 159, 336, 132, 356, 42,  46,  149, 44,  389, 296, 228, 252, 107, 312, 97, 88, 131, 234, 
		278, 279, 89,  278, 29,  170, 180, 51,  85,  39,  77,  389, 82,  272, 56, 260, 114, 107, 244, 178, 220, 240, 384, 353, 
		280, 281, 178, 205, 66,  58,  182, 73,  224, 114, 306, 414, 183, 402, 105, 137, 313, 325, 165, 133, 168, 124, 111, 139, 
		282, 283, 49,  235, 123, 256, 9,   20,  38,  25,  357, 169, 119, 293, 257, 178, 96, 334, 259, 327, 217, 395, 251, 43, 
		284, 285, 384, 381, 409, 411, 54,  150, 12,  111, 29,  180, 0,   98,  336, 83, 153, 254, 40, 300, 25, 272, 92, 178, 
		286, 287, 189, 324, 154, 317, 136, 323, 110, 214, 300, 190, 312, 175, 100, 210, 31, 374, 135, 140, 243, 74, 302, 348, 
		288, 289, 314, 89,  52,  288, 335, 94,  176, 408, 333, 79,  410, 77,  18, 286, 269, 353, 362, 104, 233, 238, 75, 206, 
		290, 291, 350, 392, 49,  346, 241, 135, 158, 72,  130, 319, 360, 205, 289, 325, 285, 356, 156, 138, 164, 237, 349, 283, 
		292, 293, 31,  304, 342, 171, 179, 104, 267, 269, 174, 180, 347, 246, 95, 5, 83, 309, 242, 175, 75, 341, 176, 134, 
		294, 295, 59,  105, 51,  185, 179, 372, 108, 381, 174, 144, 264, 31,  35, 92, 172, 86, 122, 303, 348, 288, 294, 338, 
		296, 297, 93,  27,  322, 255, 247, 373, 282, 222, 145, 8,   32,  0,   375, 175, 256, 366, 290, 75, 105, 167, 367, 355, 
		298, 299, 191, 152, 118, 9,   11,  239, 85,  175, 324, 373, 354, 90,  20, 105, 184, 65, 303, 211, 110, 41, 302, 235, 
		300, 301, 168, 313, 210, 40,  103, 22,  41,  27,  205, 113, 120, 16,  279, 195, 271, 331, 317, 373, 269, 398, 214, 212, 
		302, 303, 344, 268, 396, 59,  40,  282, 180, 2,   130, 305, 403, 192, 290, 162, 109, 414, 269, 350, 219, 163, 357, 48, 
		304, 305, 33,  137, 19,  324, 255, 80,  197, 160, 413, 237, 262, 256, 141, 325, 286, 401, 361, 317, 331, 167, 150, 94, 
		306, 307, 89,  297, 313, 358, 116, 322, 187, 93,  7,   75,  70,  267, 392, 294, 21, 124, 383, 361, 276, 191, 226, 251, 
		308, 309, 235, 304, 87,  209, 152, 280, 324, 315, 21,  85,  164, 105, 381, 292, 150, 2, 30, 49, 153, 261, 242, 243, 
		310, 311, 184, 120, 365, 162, 37,  352, 163, 338, 269, 278, 286, 182, 323, 25, 81, 195, 130, 409, 186, 14, 374, 257, 
		312, 313, 197, 265, 247, 222, 79,  241, 383, 224, 314, 270, 223, 389, 375, 242, 286, 250, 31, 154, 357, 130, 255, 111, 
		314, 315, 327, 391, 80,  41,  186, 121, 130, 184, 232, 405, 367, 313, 93, 294, 306, 398, 50, 32, 228, 148, 303, 38, 
		316, 317, 150, 199, 57,  402, 127, 72,  316, 134, 260, 409, 268, 356, 333, 329, 241, 110, 165, 25, 394, 334, 246, 236, 
		318, 319, 144, 179, 5,   252, 131, 236, 163, 278, 13,  273, 327, 289, 354, 343, 54, 203, 71, 123, 184, 165, 241, 58, 
		320, 321, 324, 80,  338, 326, 381, 117, 335, 408, 4,   51,  380, 180, 22, 262, 222, 6, 166, 73, 126, 127, 212, 287, 
		322, 323, 105, 27,  270, 400, 345, 254, 38,  371, 93,  407, 351, 213, 65, 395, 236, 359, 209, 238, 361, 226, 291, 370, 
		324, 325, 138, 113, 287, 325, 214, 400, 360, 315, 397, 332, 244, 236, 175, 384, 37, 134, 26, 224, 381, 131, 329, 91, 
		326, 327, 22,  299, 87,  217, 232, 10,  409, 130, 150, 328, 135, 133, 230, 366, 194, 354, 204, 229, 57, 72, 324, 16, 
		328, 329, 264, 215, 348, 147, 12,  111, 94,  237, 347, 223, 92,  11,  91, 183, 353, 409, 365, 216, 261, 156, 297, 321, 
		330, 331, 373, 185, 121, 76,  404, 66,  379, 113, 230, 193, 292, 197, 376, 303, 319, 256, 63, 135, 184, 48, 298, 79, 
		332, 333, 292, 225, 322, 12,  352, 86,  50,  29,  180, 32,  138, 82,  81, 384, 189, 2, 399, 259, 106, 129, 294, 20, 
		334, 335, 282, 221, 179, 376, 393, 299, 290, 178, 377, 201, 409, 216, 116, 288, 415, 270, 379, 210, 397, 8, 72, 36, 
		336, 337, 131, 115, 304, 290, 9,   99,  377, 94,  234, 93,  309, 12,  320, 71, 385, 229, 218, 315, 327, 173, 263, 353, 
		338, 339, 270, 370, 273, 410, 75,  376, 72,  131, 11,  164, 95,  157, 294, 229, 352, 231, 89, 349, 192, 52, 176, 194, 
		340, 341, 172, 84,  130, 280, 405, 213, 73,  179, 7,   186, 25,  312, 196, 125, 401, 20, 206, 397, 325, 289, 361, 342, 
		342, 343, 145, 242, 344, 57,  225, 95,  223, 338, 333, 33,  89,  280, 236, 181, 328, 54, 357, 59, 316, 179, 247, 0, 
		344, 345, 298, 71,  14,  240, 292, 161, 68,  97,  320, 354, 123, 184, 42, 332, 228, 128, 278, 176, 58, 168, 221, 284, 
		346, 347, 219, 156, 133, 302, 125, 79,  378, 98,  52,  266, 263, 21,  111, 344, 41, 276, 388, 250, 310, 145, 134, 112, 
		348, 349, 207, 18,  3,   307, 120, 227, 371, 249, 134, 234, 161, 256, 316, 155, 372, 166, 173, 128, 347, 394, 198, 351, 
		350, 351, 122, 204, 228, 150, 279, 236, 214, 388, 252, 312, 392, 90,  25, 368, 296, 316, 366, 350, 223, 112, 58, 84, 
		352, 353, 381, 156, 228, 316, 66,  293, 324, 345, 55,  267, 70,  358, 290, 81, 298, 250, 135, 227, 175, 261, 58, 8, 
		354, 355, 193, 92,  59,  109, 339, 123, 85,  368, 404, 359, 361, 257, 56, 356, 311, 326, 181, 18, 95, 184, 64, 259, 
		356, 357, 209, 50,  190, 311, 58,  212, 91,  230, 390, 105, 153, 151, 345, 307, 388, 378, 295, 99, 110, 9, 346, 80, 
		358, 359, 13,  19,  301, 205, 183, 274, 345, 121, 37,  10,  385, 341, 187, 180, 15, 276, 259, 125, 318, 356, 63, 64, 
		360, 361, 343, 69,  99,  284, 288, 9,   365, 311, 352, 32,  322, 334, 50, 12, 155, 26, 7, 133, 37, 307, 19, 215, 
		362, 363, 14,  356, 5,   294, 218, 287, 142, 12,  282, 359, 136, 319, 330, 326, 19, 284, 84, 73, 56, 355, 59, 26, 
		364, 365, 359, 297, 227, 400, 119, 189, 191, 292, 383, 378, 161, 114, 299, 194, 366, 273, 274, 415, 6, 197, 133, 355, 
		366, 367, 197, 386, 190, 86,  236, 103, 381, 359, 234, 27,  290, 2,   107, 170, 286, 281, 390, 10, 300, 85, 193, 145, 
		368, 369, 343, 104, 149, 180, 219, 121, 103, 217, 12,  261, 164, 166, 291, 91, 105, 365, 92, 74, 258, 238, 209, 301, 
		370, 371, 246, 106, 58,  298, 268, 281, 43,  328, 234, 150, 33,  335, 88, 264, 132, 271, 129, 237, 327, 114, 309, 249, 
		372, 373, 406, 245, 32,  318, 291, 205, 221, 179, 155, 87,  187, 134, 91, 185, 284, 327, 305, 269, 351, 182, 125, 30, 
		374, 375, 304, 14,  315, 230, 364, 202, 7,   223, 369, 125, 83,  164, 295, 367, 216, 348, 301, 239, 135, 409, 132, 335, 
		376, 377, 121, 368, 7,   345, 59,  299, 332, 282, 229, 188, 404, 21,  373, 74, 1, 194, 327, 158, 396, 204, 393, 406, 
		378, 379, 327, 370, 206, 139, 400, 32,  398, 313, 148, 277, 284, 214, 134, 274, 117, 227, 21, 189, 278, 176, 396, 403, 
		380, 381, 195, 342, 22,  231, 70,  243, 324, 263, 178, 79,  11,  6,   293, 31, 350, 384, 160, 191, 137, 269, 38, 325, 
		382, 383, 291, 335, 65,  39,  156, 199, 293, 52,  166, 155, 87,  233, 70, 400, 172, 7, 387, 45, 248, 347, 280, 284, 
		384, 385, 190, 246, 310, 367, 202, 40,  167, 329, 137, 294, 29,  405, 262, 199, 50, 64, 75, 9, 272, 373, 351, 228, 
		386, 387, 165, 384, 129, 226, 2,   51,  83,  269, 17,  3,   271, 136, 67, 38, 236, 121, 208, 124, 0, 48, 315, 302, 
		388, 389, 387, 260, 4,   22,  40,  90,  306, 114, 227, 197, 309, 29,  20, 361, 178, 402, 333, 182, 313, 172, 336, 98, 
		390, 391, 153, 287, 412, 0,   307, 369, 355, 29,  22,  410, 337, 214, 363, 72, 346, 62, 108, 284, 216, 405, 61, 235, 
		392, 393, 91,  200, 250, 232, 349, 61,  317, 333, 51,  163, 109, 273, 186, 292, 213, 77, 229, 407, 16, 204, 5, 394, 
		394, 395, 380, 25,  409, 298, 186, 60,  314, 196, 119, 88,  43,  404, 204, 365, 127, 362, 8, 337, 250, 66, 100, 237, 
		396, 397, 155, 332, 118, 50,  17,  379, 174, 18,  125, 70,  264, 69,  356, 101, 252, 308, 313, 259, 81, 54, 330, 415, 
		398, 399, 233, 143, 344, 355, 200, 137, 334, 206, 30,  66,  398, 205, 202, 74, 300, 165, 376, 279, 87, 377, 8, 337, 
		400, 401, 40,  415, 407, 274, 408, 72,  115, 255, 25,  107, 159, 83,  101, 267, 14, 268, 2, 77, 30, 27, 281, 330, 
		402, 403, 207, 12,  399, 153, 144, 37,  353, 305, 2,   409, 15,  414, 70, 84, 100, 20, 268, 98, 40, 87, 252, 45, 
		404, 405, 392, 99,  141, 366, 205, 31,  211, 84,  71,  405, 194, 298, 299, 224, 353, 214, 357, 341, 36, 321, 196, 223, 
		406, 407, 111, 128, 124, 135, 2,   38,  69,  109, 240, 100, 340, 43,  329, 283, 20, 177, 228, 325, 63, 68, 224, 191, 
		408, 409, 149, 227, 358, 212, 151, 132, 336, 331, 294, 160, 193, 236, 281, 125, 147, 1, 27, 202, 223, 164, 307, 388, 
		410, 411, 158, 284, 371, 276, 295, 31,  214, 263, 364, 68,  335, 245, 195, 119, 317, 297, 132, 405, 17, 282, 11, 185, 
		412, 413, 359, 257, 290, 254, 156, 136, 340, 43,  30,  366, 143, 305, 51, 403, 52, 219, 322, 114, 252, 188, 362, 415, 
		414, 415, 183, 292, 233, 12,  323, 159, 177, 311, 110, 104, 314, 408, 291, 20, 137, 48, 74, 52, 313, 154, 65, 411, 
		1,   2,   62,  401, 392, 183, 33,  388, 9,   193, 164, 100, 95,  371, 91, 209, 237, 97, 357, 75, 360, 18, 44, 359, 
		3,   4,   219, 228, 277, 355, 392, 230, 214, 121, 186, 249, 120, 110, 342, 368, 371, 271, 76, 190, 243, 310, 107, 320, 
		5,   6,   334, 6,   186, 136, 301, 210, 228, 372, 73,  26,  370, 404, 257, 207, 110, 68, 146, 242, 48, 51, 384, 258, 
		7,   8,   397, 222, 286, 208, 305, 150, 57,  160, 347, 22,  33,  58,  123, 201, 15, 128, 387, 350, 143, 265, 188, 240, 
		9,   10,  96,  141, 403, 275, 38,  198, 405, 302, 172, 159, 332, 349, 157, 374, 188, 194, 285, 87, 227, 209, 305, 410, 
		11,  12,  35,  85,  168, 343, 89,  306, 157, 213, 162, 192, 129, 285, 101, 222, 208, 392, 106, 380, 339, 37, 59, 277, 
		13,  14,  85,  368, 414, 264, 272, 74,  105, 32,  296, 42,  129, 46,  370, 290, 83, 278, 41, 207, 184, 8, 21, 337, 
		15,  16,  27,  274, 133, 357, 389, 137, 411, 295, 412, 7,   30,  50,  32, 21, 386, 170, 104, 289, 11, 279, 36, 202, 
		17,  18,  336, 37,  306, 127, 252, 299, 363, 58,  138, 347, 270, 39,  182, 329, 401, 119, 346, 362, 75, 378, 55, 227, 
		19,  20,  155, 278, 322, 324, 53,  260, 104, 297, 125, 342, 110, 11,  323, 218, 321, 38, 345, 162, 176, 303, 108, 348, 
		21,  22,  395, 404, 259, 169, 407, 366, 331, 230, 250, 137, 386, 328, 131, 355, 303, 367, 70, 118, 405, 297, 412, 108, 
		23,  24,  170, 81,  246, 18,  332, 188, 150, 165, 51,  74,  237, 234, 145, 222, 390, 193, 259, 117, 10, 73, 11, 133, 
		25,  26,  201, 45,  385, 225, 291, 411, 233, 408, 69,  249, 97,  186, 269, 247, 64, 389, 49, 271, 317, 147, 27, 178, 
		27,  28,  368, 12,  364, 41,  113, 317, 340, 220, 86,  310, 244, 63,  371, 7, 200, 309, 326, 191, 291, 289, 274, 59, 
		29,  30,  194, 303, 129, 323, 8,   1,   380, 97,  145, 74,  162, 309, 169, 23, 179, 261, 237, 250, 189, 59, 243, 138, 
		31,  32,  150, 244, 302, 267, 84,  121, 93,  20,  118, 323, 95,  193, 258, 221, 409, 269, 410, 135, 300, 132, 335, 222, 
		33,  34,  412, 220, 31,  194, 164, 140, 374, 48,  275, 395, 338, 330, 336, 391, 273, 25, 362, 343, 406, 98, 33, 342, 
		35,  36,  360, 172, 170, 351, 231, 61,  269, 9,   341, 401, 209, 191, 309, 1, 400, 311, 307, 177, 247, 275, 4, 131, 
		37,  38,  224, 19,  93,  315, 213, 14,  212, 324, 320, 189, 96,  313, 136, 8, 407, 146, 107, 335, 154, 281, 162, 405, 
		39,  40,  251, 302, 113, 285, 154, 156, 27,  396, 160, 76,  194, 226, 4, 241, 293, 409, 414, 84, 118, 397, 301, 255, 
		41,  42,  375, 38,  39,  134, 161, 268, 254, 374, 402, 238, 16,  122, 71, 54, 369, 350, 3, 48, 9, 329, 248, 273, 
		43,  44,  326, 289, 60,  402, 255, 155, 36,  241, 65,  303, 315, 164, 350, 143, 73, 276, 361, 275, 160, 232, 89, 248, 
		45,  46,  261, 332, 302, 140, 160, 248, 343, 173, 363, 358, 191, 292, 405, 180, 40, 76, 111, 316, 153, 52, 139, 240, 
		47,  48,  15,  179, 128, 2,   388, 49,  336, 79,  192, 1,   37,  194, 18, 5, 314, 338, 318, 350, 275, 307, 184, 148, 
		49,  50,  27,  397, 281, 285, 278, 408, 294, 268, 404, 24,  145, 57,  305, 133, 316, 232, 361, 127, 48, 1, 28, 228, 
		51,  52,  133, 177, 185, 288, 230, 49,  140, 215, 331, 380, 356, 357, 4, 213, 314, 327, 19, 41, 266, 398, 80, 190, 
		53,  54,  229, 196, 221, 135, 128, 217, 299, 288, 19,  179, 85,  279, 341, 24, 239, 294, 271, 67, 50, 100, 38, 28, 
		55,  56,  309, 405, 292, 214, 387, 373, 234, 147, 141, 87,  128, 382, 79, 415, 360, 294, 170, 297, 23, 124, 244, 231, 
		57,  58,  81,  350, 361, 36,  309, 106, 396, 144, 394, 71,  75,  360, 182, 210, 11, 280, 197, 39, 34, 353, 250, 253, 
		59,  60,  189, 403, 71,  260, 116, 343, 23,  337, 336, 180, 25,  90,  362, 27, 177, 185, 202, 54, 377, 32, 43, 201, 
		61,  62,  107, 115, 144, 398, 63,  352, 254, 89,  27,  155, 216, 175, 367, 386, 390, 232, 56, 221, 223, 188, 250, 253, 
		63,  64,  333, 316, 318, 414, 302, 314, 310, 87,  234, 123, 219, 11,  0, 167, 327, 254, 267, 88, 356, 126, 131, 66, 
		65,  66,  26,  142, 396, 265, 303, 239, 380, 122, 32,  400, 271, 162, 269, 150, 288, 370, 98, 202, 129, 401, 46, 164, 
		67,  68,  264, 295, 39,  141, 376, 115, 241, 145, 398, 255, 259, 197, 253, 326, 166, 403, 284, 260, 232, 99, 412, 300, 
		69,  70,  209, 409, 8,   111, 351, 10,  50,  116, 112, 254, 264, 46,  182, 316, 354, 242, 206, 247, 278, 180, 92, 392, 
		71,  72,  337, 126, 245, 204, 123, 388, 305, 334, 68,  326, 161, 206, 232, 300, 53, 51, 9, 246, 270, 348, 136, 263, 
		73,  74,  219, 49,  115, 81,  247, 177, 197, 392, 311, 151, 159, 369, 281, 105, 37, 223, 201, 168, 303, 241, 346, 380, 
		75,  76,  197, 288, 257, 165, 356, 316, 281, 120, 0,   147, 172, 217, 95, 282, 347, 313, 35, 61, 47, 91, 357, 101, 
		77,  78,  16,  259, 364, 290, 403, 173, 214, 67,  275, 288, 157, 283, 43, 36, 222, 293, 379, 223, 349, 114, 86, 323, 
		79,  80,  114, 62,  364, 326, 139, 258, 358, 317, 344, 146, 28,  128, 222, 184, 203, 161, 50, 18, 182, 283, 74, 363, 
		81,  82,  239, 6,   229, 317, 129, 316, 359, 322, 24,  266, 250, 271, 206, 323, 118, 220, 34, 235, 385, 253, 137, 379, 
		83,  84,  171, 114, 396, 364, 158, 190, 92,  97,  194, 206, 303, 91,  33, 46, 317, 74, 170, 195, 337, 52, 387, 255, 
		85,  86,  76,  23,  225, 363, 18,  171, 130, 112, 200, 15,  133, 65,  183, 57, 174, 308, 311, 408, 116, 370, 392, 227, 
		87,  88,  166, 231, 284, 336, 279, 259, 241, 168, 204, 52,  137, 222, 277, 96, 239, 67, 339, 303, 217, 196, 91, 337, 
		89,  90,  269, 219, 381, 251, 37,  131, 391, 300, 415, 382, 351, 68,  76, 289, 247, 226, 47, 403, 299, 62, 322, 315, 
		91,  92,  351, 171, 294, 123, 255, 37,  99,  221, 391, 132, 154, 64,  397, 196, 348, 344, 79, 112, 200, 103, 4, 158, 
		93,  94,  147, 246, 79,  322, 297, 122, 71,  357, 265, 307, 270, 319, 73, 336, 330, 245, 290, 49, 343, 44, 327, 211, 
		95,  96,  334, 231, 156, 215, 241, 103, 33,  80,  358, 122, 350, 101, 266, 340, 316, 302, 67, 249, 409, 72, 100, 380
};

//////////////////////////////////////////////////////////////////////////
// Проверка случайного входного вектора (Моделирование сети на 1 образе)
// возвращает количество несовпадений с ключом
int ImageRecognition ( 
					float *inputArr, float *weightsArr, 
					int *keyArr, int *mixerKey, int *checkKeyArr )
{
	int   errorCount = 0;			// количество несовпадений с ключом
	float fSum;						// выход сумматора нейрона 

	// Моделирование работы первого слоя сети для i-го образа
	int znak = 1;	// мешалка
	for ( int iCount = 0; iCount < NEURON_COUNT; iCount++)
	{	
		fSum = 0;
		// Вычисление выхода сумматора
		for( int jCount = 0; jCount < NC_L1_WEIGHT; jCount++) {
			fSum += 
				inputArr[ConnectionArray_Layer_1[iCount*NC_L1_WEIGHT+jCount]]*
				weightsArr[iCount*NC_L1_WEIGHT+jCount]*
				znak; 
		}
		// Создание ключа для i-го нейрона
		checkKeyArr[iCount] = ( fSum > 0.0f );
		// Сравнение ключей
		if ( keyArr[iCount] != checkKeyArr[iCount] ) errorCount++; 
		
		// Определяем знак весов следующего нейрона
		znak = -2*(checkKeyArr[iCount]^mixerKey[iCount])+1;
	}
	
	// Возвращаем количество несовпадений с ключом
	return errorCount;
}

// Моделирование сети на 1 образе. Преобразование рукописного пароля в ключ
// Используется для зажигания светофора
int ImageSimulation ( 
					 const float inputArr[], const NCWEIGHTS weights, 
					 const NCKEY mixKey, NCKEY checkKey )
{
	float fSum;				// выход нейрона выходного слоя
	int yellowSvet = 0;		// счётчик количества попаданий
	int iKey;				// полученный элемент ключа

	// Массив смещений функции активации для каждого нейрона (для 256 нейронов первого слоя)
	// Использование смещения должно сделать вероятность появления ноликов/единичек
	// на выходах нейрона при тестировании на Чужих образах равной 0,5 
	float offsetArr[NEURON_COUNT];
	memcpy ( offsetArr, weights + NC_L1_COUNT, NEURON_COUNT*sizeof(float));

	// Моделирование работы первого слоя сети
	int znak = 1;	// мешалка
	for ( int iCount = 0; iCount < NEURON_COUNT; iCount++ ) 
	{	
		fSum = 0;
		for( int jCount = 0; jCount < NC_L1_WEIGHT; jCount++ ) {
			fSum += 
				(float)inputArr[ConnectionArray_Layer_1[iCount*NC_L1_WEIGHT+jCount]]*
				weights[iCount*NC_L1_WEIGHT+jCount]*
				znak; 
		}

		// Подсчитываем количество выходов, попавших  в интервалы
		float c1 = fabs( fSum );
		if ( c1 > 0.5 && c1 <= 1.5 ) yellowSvet++;

		// Создание ключа для i-го нейрона
//		iKey = ( fSum > 0.0f );
// вводим смещение
iKey = ( fSum > offsetArr[iCount] );
		// Установка бита ключа, в зависимости от выхода сети
		setbit ( checkKey, iCount, iKey );

//	СЕТЬ БЕЗ МЕШАЛКИ	СЕТЬ БЕЗ МЕШАЛКИ	СЕТЬ БЕЗ МЕШАЛКИ	СЕТЬ БЕЗ МЕШАЛКИ
		// Определяем знак весов следующего нейрона
//		znak = -2*(iKey^getbit(mixKey,iCount))+1;
//	СЕТЬ БЕЗ МЕШАЛКИ	СЕТЬ БЕЗ МЕШАЛКИ	СЕТЬ БЕЗ МЕШАЛКИ	СЕТЬ БЕЗ МЕШАЛКИ
	}	

	// Возвращаем количество выходов первого слоя, попавших в интервал
	return yellowSvet;
}

// Проверка тестовых примеров на одном нейроне первого/второго слоя 
// Возвращает количество несовпадений с ключом
int NeuronRecognitionOnTest ( 
					int neuronNum,  int imageCount, 
					const int keyBit, float inputArr[], float weightsArr[],				
					const int weightsCount, const short ConnectionArr[] )
{
	int   errorCount = 0;				// количество несовпадений с исходным ключом
	int   iCheckKey;					// сгенерированный нейроном элемент ключа
	float fSum;							// выход сумматора i-го нейрона
	int   number;					    // количество входных элементов
	
	if (weightsCount == NC_L1_WEIGHT) number = NCFOURIER_COUNT;
	else							  number = NEURON_COUNT;

	// Последовательное моделирование каждого образа
	for ( int iMageNum = 0; iMageNum < imageCount; iMageNum++)
	{
		// Моделирование работы нейрона для i-го образа
		fSum = 0;
		for( int iCount = 0; iCount < weightsCount; iCount++) {
			fSum += 
				inputArr[ConnectionArr[neuronNum*weightsCount + iCount] + iMageNum*number] * 
				weightsArr[neuronNum*weightsCount + iCount];		
		}
		// Создание элемента ключа для i-го образа
		iCheckKey = ( fSum > 0.0f );
		// Сравнение элементов ключей
		if ( keyBit != iCheckKey ) errorCount++;
	}
	return errorCount;
}

// Проверка тестовых примеров на одном нейроне первого/второго слоя 
// Возвращает выходное качеств
float NeuronQualityOnTest  (
					int neuronNum, int weightsCount, 
					const short *ConnectionArr, int imageCount,
					float *inputArr, float *weightsArr )
{
	float *neuronSumArr = new float[imageCount];
	int number;						// количество входных элементов
	if ( weightsCount == NC_L1_WEIGHT ) number = NCFOURIER_COUNT;
	else								number = NEURON_COUNT;

	// Последовательное моделирование каждого образа
	for ( int iMageNum = 0; iMageNum < imageCount; iMageNum++ )
	{
		// Моделирование работы нейрона для i-го образа
		neuronSumArr[iMageNum] = 0;
		for( int iCount = 0; iCount < weightsCount; iCount++) {
			neuronSumArr[iMageNum] += 
				inputArr[ConnectionArr[neuronNum*weightsCount + iCount] + iMageNum*number]* 
				weightsArr[neuronNum*weightsCount + iCount];		
		}
	}

	// Вычисление выходного качества для данного нейрона на тестовой выборке
	BNCMOMENTS params;
	fadq ( imageCount, neuronSumArr, params );

	delete [] neuronSumArr;

	return params.fqual;
}

// Вычисление качества обучения одного нейрона
// neuronNum	- [in] номер моделируемого нейрона
// trnCount		- [in] количество образов Своего
// trnCoeff     - [in] коэффициенты Своего
// tstCount		- [in] количество образов Чужого
// tstCoeff		- [in] коэффициенты Чужого
// weightsArr	- [in] веса первого/второго слоя сети
// Возвращает качество обучения моделируемого нейрона: q = |a1-a2|/(d1+d2)
float NeuronTrainQuality (
						  UINT neuronNum, 
						  UINT trnCount, float trnCoeff[],
						  UINT tstCount, float tstCoeff[],
						  float weightsArr[],  
						  const int weightsCount,
						  const short ConnectionArr[] )
{
	float *outSum1 = new float [trnCount];
	float *outSum2 = new float [tstCount];

	// Вычисление выходов на Своих
	NeuronSimulation ( neuronNum, trnCount, trnCoeff, weightsArr, outSum1 );
	// Вычисление выходов на Чужих
	NeuronSimulation ( neuronNum, tstCount, tstCoeff, weightsArr, outSum2 );
	
	BNCMOMENTS params1, params2;
	fadq ( trnCount, outSum1, params1 );
	fadq ( tstCount, outSum2, params2 );
	float q = abs(params1.faver-params2.faver)/(params1.fdisp+params2.fdisp);

	delete [] outSum1;
	delete [] outSum2;

	return q;
}

// Вычисление выходов заданного нейрона на группе тестовых образов
void NeuronSimulation ( 
					   const int neuronNum,  
					   const int imageCount,
					   float inputArr[], 
					   const float weightsArr[], 
					   float outSum[], 
					   const int weightsCount,
					   const short ConnectionArr[],
					   float outNeuron[] )
{
	int   number;					    // количество входных элементов
	number = (weightsCount == NC_L1_WEIGHT) ? NCFOURIER_COUNT : NEURON_COUNT;
	// Последовательное моделирование каждого образа
	for ( int iMageNum = 0; iMageNum < imageCount; iMageNum++)
	{
		// Моделирование работы нейрона для i-го образа
		outSum[iMageNum] = 0.0f;
		for( int iCount = 0; iCount < weightsCount; iCount++) {
			outSum[iMageNum] += 
				inputArr[ConnectionArr[neuronNum*weightsCount + iCount] + iMageNum*number] * 
				weightsArr[neuronNum*weightsCount + iCount];		
		}
		// Создание элемента ключа для i-го образа
		if ( outNeuron != NULL ) outNeuron[iMageNum] = ( outSum[iMageNum] > 0.0f );
	}
}


// Моделирование одного слоя сети на группе образов 
// Вычисление выходных сумм одного слоя
void GroupLayerSimulation ( 
					int imageCount, float inputArr[], 
					float weightsArr[], float outputArr[],
					const int weightsCount,
					const short ConnectionArr[] )
{
	float fSum;
	int i_position = -1;	// номер ячейки в массиве, содержащим все выходные суммы
	int coefCount = 0;		// количество входных коэффициентов (для первого 
							// слоя = NCFOURIER_COUNT, а для второго = NEURON_COUNT)
	// Определяем работу какого слоя предстоит моделировать 
	if ( weightsCount == NC_L1_WEIGHT) coefCount = NCFOURIER_COUNT;
	else							   coefCount = NEURON_COUNT;

	// Массив для считанных входных коэффициентов (Фурье или выходы сумматоров первого слоя)
	float *inputVec = new float [coefCount];	

	// Последовательное моделирование каждого образа
	for ( int imageNum = 0; imageNum < imageCount; imageNum++ )
	{
		// Заполняем вектор водных коэффициентов i-го образа
		memcpy ( inputVec, inputArr+imageNum*coefCount, coefCount*sizeof(float) );

		// Моделирование работы сети для i-го образа
		for ( int iCount = 0; iCount < NEURON_COUNT; iCount++)
		{	
			i_position++;
			fSum = 0;
			for( int jCount = 0; jCount < weightsCount; jCount++) {
				fSum += 
					(float)inputVec[ConnectionArr[iCount*weightsCount+jCount]]*
					weightsArr[iCount*weightsCount+jCount];
			}
			outputArr[i_position] = fSum;
		}	// завершение работы с i-м образом
	}	// конец цикла проверки образов

	delete [] inputVec;

}

// Вычисление вероятности появления нолика на выходе нейрона
// Моделируем сеть на группе образов и смотрим с какой вероятностью
// на выходе каждого нейрона появляются нолики и единички
void LayerSimulationForProb (
					bool bUseShift,
					int imageCount, float inputArr[], 
					const float weightsArr[], float outputArr[],
					const int weightsCount, const short ConnectionArr[] )
{
	float fSum;
	int coefCount = 0;		// количество входных коэффициентов (для первого 
	// слоя = NCFOURIER_COUNT, а для второго = NEURON_COUNT)
	// Определяем работу какого слоя предстоит моделировать 
	if ( weightsCount == NC_L1_WEIGHT) coefCount = NCFOURIER_COUNT;
	else							   coefCount = NEURON_COUNT;

	// Массив смещений функции активации для каждого нейрона (для 256 нейронов первого слоя)
	// Использование смещения должно сделать вероятность появления ноликов/единичек
	// на выходах нейрона при тестировании на Чужих образах равной 0,5 
	float offsetArr[NEURON_COUNT] = {0};
	if ( bUseShift )
		memcpy ( offsetArr, weightsArr + NC_L1_COUNT, NEURON_COUNT*sizeof(float));

	// Массив для считанных входных коэффициентов (Фурье или выходы сумматоров первого слоя)
	float *inputVec = new float [coefCount];	

	ZeroMemory(outputArr, NEURON_COUNT*sizeof(float));

	// Последовательное моделирование каждого образа
	for ( int imageNum = 0; imageNum < imageCount; imageNum++ )
	{
		// Заполняем вектор водных коэффициентов i-го образа
		memcpy ( inputVec, inputArr+imageNum*coefCount, coefCount*sizeof(float) );

		// Моделирование работы сети для i-го образа
		for ( int iCount = 0; iCount < NEURON_COUNT; iCount++ )
		{	
			fSum = 0;
			for( int jCount = 0; jCount < weightsCount; jCount++) {
				fSum += 
					(float)inputVec[ConnectionArr[iCount*weightsCount+jCount]]*
					weightsArr[iCount*weightsCount+jCount];
			}
//			if ( fSum <= 0 ) outputArr[iCount]++;
			// Вводим смещение
			if ( fSum <= offsetArr[iCount] ) outputArr[iCount]++;

		}	// завершение работы с i-м образом
	}	// конец цикла проверки образов

	// Вычисляем вероятность появления ноликов на выходах нейронов
	for ( int iCount = 0; iCount < NEURON_COUNT; iCount++ ) {
		outputArr[iCount] /= imageCount;
	}

	delete [] inputVec;

}

// Вычисление количества образов "Своего"
int GroupSimulationForCompare (
					int imageCount, float *inputArr, 
					float *weightsArr, int *keyArr, int *mixerKey )
						
{
	NCFOURIER oneImageArr;	  // коэффициенты Фурье одного образа		
	float fSum;				  // выход сумматора нейрона
	int checkKey;			  // полученный элемент ключа
	int err = 0;			  // кол-во образов СВОЕГО
	
	// Последовательное моделирование каждого образа
	for ( int i_Mage = 0; i_Mage < imageCount; i_Mage++ )
	{
		// Чтение коэффициентов Фурье i-го образа
		for( int iCount = 0; iCount < NCFOURIER_COUNT; iCount++ ) {
			oneImageArr[iCount] = inputArr[i_Mage*NCFOURIER_COUNT+iCount]; 
		}
		// Моделирование работы первого слоя сети для i-го образа
		int errorCount = 0;	
		int znak = 1;	// мешалка
		for ( int iCount = 0; iCount < NEURON_COUNT; iCount++ )
		{	
			fSum = 0;
			for( int jCount = 0; jCount < NC_L1_WEIGHT; jCount++ ) {
				fSum += 
					oneImageArr[ConnectionArray_Layer_1[iCount*NC_L1_WEIGHT+jCount]]*
					weightsArr[iCount*NC_L1_WEIGHT+jCount]*
					znak; 
			}

			// Создание ключа для i-го нейрона
			if (fSum > 0) checkKey = 1;
			else		  checkKey = 0;
			// Сравнение ключей
			if( keyArr[iCount] != checkKey ) errorCount++; 

			// Определяем знак весов следующего нейрона
			znak = -2*(checkKey^mixerKey[iCount])+1;
		}
		if ( errorCount == 0 ) err++;
	}
	return err;
}

// Моделирование однослойной сети на тестовых образах. 
// Возвращает массив с количеством несовпадений
void NetRecognition ( 
					 UINT imageCount, const float inputArr[],
					 const NCWEIGHTS weightsArr, 
					 const NCKEY key, const NCKEY mixKey, 
					 int xemmingArr[] )
{
//	СЕТЬ БЕЗ МЕШАЛКИ	СЕТЬ БЕЗ МЕШАЛКИ	СЕТЬ БЕЗ МЕШАЛКИ	СЕТЬ БЕЗ МЕШАЛКИ
// ДЛЯ ОДНОСЛОЙНОЙ СЕТИ С МЕШАЛКОЙ
	NCFOURIER	oneImageArr;	  // коэффициенты Фурье одного образа		
	float		fSum;			  // выход сумматора
	int			checkKey;		  // полученный элемент ключа

	// Массив смещений функции активации для каждого нейрона (для 256 нейронов первого слоя)
	// Использование смещения должно сделать вероятность появления ноликов/единичек
	// на выходах нейрона при тестировании на Чужих образах равной 0,5 
	float offsetArr[NEURON_COUNT];
	memcpy ( offsetArr, weightsArr + NC_L1_COUNT, NEURON_COUNT*sizeof(float));

	// Последовательная проверка каждого образа
	for (unsigned imageNum = 0; imageNum < imageCount; imageNum++)
	{
		// Чтение коэффициентов Фурье i-го образа
		memcpy ( oneImageArr, inputArr + imageNum*NCFOURIER_COUNT, NCFOURIER_COUNT*sizeof(float));
		
		xemmingArr[imageNum] = 0;		// количество несовпадений с ключом

		// Моделирование работы первого слоя сети для i-го образа
		int znak = 1;	// мешалка
		for ( int iCount = 0; iCount < NEURON_COUNT; iCount++ )
		{	
			fSum = 0;
			for( int jCount = 0; jCount < NC_L1_WEIGHT; jCount++ ) {
				fSum += 
					oneImageArr[ConnectionArray_Layer_1[iCount*NC_L1_WEIGHT+jCount]]*
					weightsArr[iCount*NC_L1_WEIGHT+jCount]*
					znak; 
			}
			// Создание ключа для i-го нейрона
			checkKey = ( fSum > offsetArr[iCount] );
			// Сравнение ключей
			if ( getbit(key,iCount) != checkKey ) xemmingArr[imageNum]++; 

			// Определяем знак весов следующего нейрона
//	СЕТЬ БЕЗ МЕШАЛКИ	СЕТЬ БЕЗ МЕШАЛКИ	СЕТЬ БЕЗ МЕШАЛКИ	СЕТЬ БЕЗ МЕШАЛКИ
//			znak = -2*(checkKey^getbit(mixKey,iCount))+1;
//	СЕТЬ БЕЗ МЕШАЛКИ	СЕТЬ БЕЗ МЕШАЛКИ	СЕТЬ БЕЗ МЕШАЛКИ	СЕТЬ БЕЗ МЕШАЛКИ
		}
	}
}

// Функция используется для отлавливания "плохих" нейронов
void NetRecognition_P ( 
					 UINT imageCount, float inputArr[],
					 const NCWEIGHTS weightsArr, 
					 const NCKEY key, const NCKEY mixKey, 
					 INT xemmingArr[],
					 POINT p01[], BYTE tmpKeys[] )
{
	NCFOURIER oneImageArr;	// коэффициенты Фурье одного образа		
	float	fSum;			// выход сумматора
	int		checkKey;		// полученный элемент ключа

	// Массив смещений функции активации для каждого нейрона (для 256 нейронов первого слоя)
	// Использование смещения должно сделать вероятность появления ноликов/единичек
	// на выходах нейрона при тестировании на Чужих образах равной 0,5 
	float offsetArr[NEURON_COUNT];
	memcpy ( offsetArr, weightsArr + NC_L1_COUNT, NEURON_COUNT*sizeof(float));

	ZeroMemory(p01, NEURON_COUNT*sizeof(POINT));
			
	// Последовательная проверка каждого образа
	for (unsigned imageNum = 0; imageNum < imageCount; imageNum++)
	{
		// Чтение коэффициентов Фурье i-го образа
		memcpy ( oneImageArr, inputArr + imageNum*NCFOURIER_COUNT, NCFOURIER_COUNT*sizeof(float));

		xemmingArr[imageNum] = 0;		// количество несовпадений с ключом

		// Моделирование работы первого слоя сети для i-го образа
		int znak = 1;	// мешалка
		for ( int iCount = 0; iCount < NEURON_COUNT; iCount++ )
		{	
			fSum = 0;
			for( int jCount = 0; jCount < NC_L1_WEIGHT; jCount++ ) {
				fSum += 
					oneImageArr[ConnectionArray_Layer_1[iCount*NC_L1_WEIGHT+jCount]]*
					weightsArr[iCount*NC_L1_WEIGHT+jCount]*
					znak; 
			}
			// Вводим смещение
			if ( fSum > offsetArr[iCount] ) {  
				checkKey = 1;
				p01[iCount].y++;
			} else	{
				checkKey = 0;
				p01[iCount].x++;
			}
			tmpKeys[imageNum*NEURON_COUNT + iCount] = checkKey;

			// Сравнение ключей
			if ( getbit(key,iCount) != checkKey ) {
				xemmingArr[imageNum]++; 
			}
			
//	СЕТЬ БЕЗ МЕШАЛКИ	СЕТЬ БЕЗ МЕШАЛКИ	СЕТЬ БЕЗ МЕШАЛКИ	СЕТЬ БЕЗ МЕШАЛКИ
			// Определяем знак весов следующего нейрона
//			znak = -2*(checkKey^getbit(mixKey,iCount))+1;
//	СЕТЬ БЕЗ МЕШАЛКИ	СЕТЬ БЕЗ МЕШАЛКИ	СЕТЬ БЕЗ МЕШАЛКИ	СЕТЬ БЕЗ МЕШАЛКИ

		}
	}

	// Вычисление корреляции
//	CalcHistCorr ( p01, imageCount, inputArr, weightsArr );

	// Вычисление корреляции максимально возможного количества нейронов
//	CalcNetCorr (imageCount, inputArr, weightsArr);

}

// Проверка тестовых примеров на однослойной сети
// Моделирование первого слоя сети на группе тестовых примеров
// imageCount	- [in] количество моделируемых образов
// inputArr		- [in] коэффициенты всех образов
// weightsArr	- [in] веса однослойной сети
// key			- [in] обучающий ключ
//				- [out]количество несовпадений с ключем
int NetRecognitionOnTest (
						  UINT imageCount, float inputArr[], 
						  const NCWEIGHTS weightsArr, 
						  const NCKEY key )
{
	NCFOURIER	oneImageArr;	  // коэффициенты Фурье одного образа		
	float		fSum;			  // выход сумматора
	int			checkKey;		  // полученный элемент ключа
	int			errCount = 0;	  // общее количество несовпавших элементов/битиков	

	// Последовательная проверка каждого образа
	for (unsigned imageNum = 0; imageNum < imageCount; imageNum++)
	{
		// Чтение коэффициентов Фурье i-го образа
		memcpy ( oneImageArr, inputArr + imageNum*NCFOURIER_COUNT, NCFOURIER_COUNT*sizeof(float));

		// Моделирование работы первого слоя сети для i-го образа
		for ( int iCount = 0; iCount < NEURON_COUNT; iCount++ )
		{	
			fSum = 0;
			for( int jCount = 0; jCount < NC_L1_WEIGHT; jCount++ ) {
				fSum += 
					oneImageArr[ConnectionArray_Layer_1[iCount*NC_L1_WEIGHT+jCount]]*
					weightsArr[iCount*NC_L1_WEIGHT+jCount];
			}
			// Создание ключа для i-го нейрона
			checkKey = ( fSum > 0.0f );
			// Сравнение ключей
			if ( getbit(key,iCount) != checkKey ) errCount++; 

		}
	}
	return errCount;
}

// Cредняя корреляция для столбика
float MeanColCorr ( UINT count, int numArr[], 
				    UINT imageCount, float inputArr[], 
				    const float weightsArr[] )
{
	if ( count < 2)	return 0.0f;
		
	int num1, num2;	// пара нейронов для которой считается корреляция
	float *outSum1	  = new float[imageCount];
	float *outSum2	  = new float[imageCount];
	float fcorr = 0.0f; 
	for ( UINT i = 0; i < count; i++ ) 
	{
		num1 = numArr[rand()%count];
		do {
			num2 = numArr[rand()%count];
		} while(num2 == num1);
		// Вычисление выходов первого нейрона на тестовых образах
		NeuronSimulation ( num1, imageCount, inputArr, weightsArr, outSum1 );
		// Вычисление выходов второго нейрона на тестовых образах
		NeuronSimulation ( num2, imageCount, inputArr, weightsArr, outSum2 );
		// Вычисление корреляции выходов
		fcorr += CalcCorr(imageCount, outSum1, outSum2);
	}
	fcorr /= count;

	delete [] outSum1;
	delete [] outSum2;

	return fcorr;
}

// Вычисление корреляции
void CalcHistCorr ( POINT p01[], UINT imageCount, float inputArr[], 
				    const float weightsArr[] )
{
	// 1. Строим вектор вероятностей появления (используем вероятность появления ноликов)
	float fVer[NEURON_COUNT];
	for ( int i = 0; i < NEURON_COUNT; i++ ) {
		fVer[i] = (float)p01[i].x/imageCount;
	}
	// 2. Определяем сколько нейронов в какую группу попало
	int hist[NEURON_COUNT];	// в i-ю ячейку записывается номер группы/столбика i-го нейрона 
	int colC0 = 0, colC1 = 0, colC2 = 0, colC3 = 0, 
		colC4 = 0, colC5 = 0, colC6 = 0, colC7 = 0, colC8 = 0, colC9 = 0;
	for ( int i = 0; i < NEURON_COUNT; i++ ) 
	{
		if ( fVer[i] <= 0.1f ) { hist[i] = 0; colC0++; continue; }	// 0.0 - 0.1
		if ( fVer[i] <= 0.2f ) { hist[i] = 1; colC1++; continue; }	// 0.1 - 0.2
		if ( fVer[i] <= 0.3f ) { hist[i] = 2; colC2++; continue; }	// 0.2 - 0.3
		if ( fVer[i] <= 0.4f ) { hist[i] = 3; colC3++; continue; }	// 0.3 - 0.4
		if ( fVer[i] <= 0.5f ) { hist[i] = 4; colC4++; continue; }	// 0.4 - 0.5
		if ( fVer[i] <= 0.6f ) { hist[i] = 5; colC5++; continue; }	// 0.5 - 0.6
		if ( fVer[i] <= 0.7f ) { hist[i] = 6; colC6++; continue; }	// 0.6 - 0.7
		if ( fVer[i] <= 0.8f ) { hist[i] = 7; colC7++; continue; }	// 0.7 - 0.8
		if ( fVer[i] <= 0.9f ) { hist[i] = 8; colC8++; continue; }	// 0.8 - 0.9
		if ( fVer[i] <= 1.0f ) { hist[i] = 9; colC9++; continue; }	// 0.9 - 1.0
	}
	// Формируем массивы групп/столбиков с номерами нейронов
	int *colN0 = new int [colC0];
	int *colN1 = new int [colC1];
	int *colN2 = new int [colC2];
	int *colN3 = new int [colC3];
	int *colN4 = new int [colC4];
	int *colN5 = new int [colC5];
	int *colN6 = new int [colC6];
	int *colN7 = new int [colC7];
	int *colN8 = new int [colC8];
	int *colN9 = new int [colC9];
	colC0 = 0; colC1 = 0; colC2 = 0; colC3 = 0; colC4 = 0;
	colC5 = 0; colC6 = 0; colC7 = 0; colC8 = 0; colC9 = 0;
	for ( int i = 0; i < NEURON_COUNT; i++ )
	{
		switch( hist[i] )
		{
			case 0: colN0[colC0] = i; colC0++; break;
			case 1: colN1[colC1] = i; colC1++; break;
			case 2: colN2[colC2] = i; colC2++; break;
			case 3: colN3[colC3] = i; colC3++; break;
			case 4: colN4[colC4] = i; colC4++; break;
			case 5: colN5[colC5] = i; colC5++; break;
			case 6: colN6[colC6] = i; colC6++; break;
			case 7: colN7[colC7] = i; colC7++; break;
			case 8: colN8[colC8] = i; colC8++; break;
			case 9: colN9[colC9] = i; colC9++; break;
		}
	}
	// Вычисление корреляции для любой пары нейронов из одного столбца
	float corrArr[10] = {0}; 
	corrArr[0] = MeanColCorr( colC0, colN0, imageCount, inputArr, weightsArr );
	corrArr[1] = MeanColCorr( colC1, colN1, imageCount, inputArr, weightsArr );
	corrArr[2] = MeanColCorr( colC2, colN2, imageCount, inputArr, weightsArr );
	corrArr[3] = MeanColCorr( colC3, colN3, imageCount, inputArr, weightsArr );
	corrArr[4] = MeanColCorr( colC4, colN4, imageCount, inputArr, weightsArr );
	corrArr[5] = MeanColCorr( colC5, colN5, imageCount, inputArr, weightsArr );
	corrArr[6] = MeanColCorr( colC6, colN6, imageCount, inputArr, weightsArr );
	corrArr[7] = MeanColCorr( colC7, colN7, imageCount, inputArr, weightsArr );
	corrArr[8] = MeanColCorr( colC8, colN8, imageCount, inputArr, weightsArr );
	corrArr[9] = MeanColCorr( colC9, colN9, imageCount, inputArr, weightsArr );

	delete [] colN1;
	delete [] colN2;
	delete [] colN3;
	delete [] colN4;
	delete [] colN5;
	delete [] colN6;
	delete [] colN7;
	delete [] colN8;
	delete [] colN9;


}

// Вычисление корреляции выходов нейронов (каждый с каждым)
void CalcNetCorr ( UINT imageCount, float inputArr[], const float weightsArr[])
{
	float *allCorCoef = new float[NEURON_COUNT*NEURON_COUNT]; // все коэффициенты корреляции
	float *outSum1	  = new float[imageCount]; // выходы сумматора первого и второго
	float *outSum2	  = new float[imageCount]; // нейронов на тестовых образах
	float fcorr = 0.0f; // значение корреляции двух нейронов

	float corrTh = 0.15f;	// порог корреляции, если корреляция больше порога, фиксируем её
	for ( int i = 0; i < NEURON_COUNT; i++ )
	{
		float bigCorr[NEURON_COUNT] = {0};
		for ( int j = 0; j < NEURON_COUNT; j++ )
		{
			// Вычисление выходов первого нейрона на тестовых образах
			NeuronSimulation ( i, imageCount, inputArr, weightsArr, outSum1 );
			// Вычисление выходов второго нейрона на тестовых образах
			NeuronSimulation ( j, imageCount, inputArr, weightsArr, outSum2 );
			// Вычисление корреляции выходов
			fcorr = CalcCorr(imageCount, outSum1, outSum2);
			if ( fcorr > corrTh || fcorr < -1*corrTh ) bigCorr[j] = fcorr;
			allCorCoef[i*NEURON_COUNT+j] = fcorr;
		}
	}

	delete [] outSum1;
	delete [] outSum2;
	delete [] allCorCoef;
}