//файл:			NetTesting.cpp
//описание:		модуль, осуществляющий тестирование нейронной сети

#include "NetTesting.h"
#include "ncmath.h"
#include "mrand.h"
#include "NetSimulation.h"

/*
// Таблица дисперсий "Чужого" (вычислены на всех образах из папочки "5 букв")
static const float outsiderDisp[NCFOURIER_COUNT] = {
	5.540740f,	10.958345f,		4.805873f,	4.377724f,		3.292486f,	5.330741f,		4.430763f,	4.341420f,
	3.235411f,	4.184134f,		4.492766f,	4.709263f,		3.406518f,	3.611480f,		4.545685f,	5.065225f,
	3.526655f,	3.860482f,		4.544213f,	4.713092f,		3.314635f,	3.644189f,		4.729776f,	4.852220f,
	3.144261f,	3.714856f,		4.939082f,	4.995371f,		3.293980f,	3.654617f,		5.155367f,	5.467315f,
	3.285801f,	3.817161f,		5.084885f,	5.140732f,		3.159385f,	3.495230f,		4.404128f,	4.328119f,
	2.823398f,	2.951890f,		3.401311f,	3.465876f,		2.156190f,	2.285322f,		2.396557f,	2.603999f,
	1.601664f,	1.855161f,		1.615180f,	1.897498f,		1.317390f,	1.527901f,		1.252105f,	1.440434f,
	1.098173f,	1.327714f,		1.037365f,	1.215245f,		0.974436f,	1.192259f,		0.900140f,	1.079788f,
	5.639623f,	10.952219f,		4.883903f,	4.377305f,		3.292694f,	5.306322f,		4.431848f,	4.341864f,
	3.186848f,	4.173535f,		4.551410f,	4.709618f,		3.408707f,	3.607059f,		4.547924f,	5.066197f,
	3.488523f,	3.853577f,		4.607727f,	4.714804f,		3.314465f,	3.637753f,		4.728715f,	4.853484f,
	3.112424f,	3.714288f,		4.980788f,	4.992463f,		3.297033f,	3.650815f,		5.154728f,	5.468829f,
	3.327235f,	3.826078f,		5.012450f,	5.135861f,		3.161144f,	3.495319f,		4.398239f,	4.322912f,
	2.883388f,	2.954814f,		3.309709f,	3.453931f,		2.154346f,	2.281311f,		2.393747f,	2.594740f,
	1.627190f,	1.851176f,		1.573764f,	1.897972f,		1.316578f,	1.524656f,		1.251018f,	1.436182f,
	1.067879f,	1.326625f,		1.034951f,	1.225135f,		0.974424f,	1.190259f,		0.900358f,	1.077591f,
	4.007926f,	7.688402f,		5.412769f,	6.451753f,		4.851871f,	4.859293f,		6.373177f,	6.467949f,
	5.166605f,	5.326767f,		6.964316f,	7.097959f,		4.644797f,	5.368393f,		7.840110f,	8.150541f,
	4.596537f,	4.721318f,		7.045171f,	6.657364f,		2.976820f,	3.148032f,		3.550229f,	3.988732f,
	1.807718f,	2.088758f,		1.921203f,	2.325311f,		1.343034f,	1.582654f,		1.291534f,	1.722736f,
	5.171882f,	8.767948f,		6.679557f,	6.785185f,		5.114596f,	5.251073f,		7.010056f,	6.931412f,
	4.617989f,	5.210725f,		6.840715f,	6.880816f,		4.674009f,	4.864020f,		7.039814f,	7.198827f,
	4.444512f,	4.797958f,		5.667818f,	5.970317f,		3.224621f,	3.520206f,		3.469663f,	3.814557f,
	2.130502f,	2.441986f,		2.101485f,	2.404635f,		1.534291f,	1.833563f,		1.430159f,	1.701268f,
	5.229438f,	6.976768f,		6.837556f,	6.159990f,		4.441617f,	5.490448f,		6.138469f,	7.239093f,
	4.387147f,	4.567335f,		6.322535f,	6.592320f,		4.454910f,	4.351851f,		6.288406f,	6.562599f,
	4.346231f,	4.725169f,		5.395308f,	5.720114f,		3.112305f,	3.622730f,		3.329326f,	3.775261f,
	1.987886f,	2.452638f,		1.881041f,	2.358625f,		1.440119f,	1.941664f,		1.334519f,	1.782930f,
	4.920315f,	14.391525f,		6.055754f,	6.206397f,		4.491677f,	4.537386f,		5.654791f,	6.938196f,
	4.386351f,	6.736097f,		6.420833f,	6.618638f,		4.279675f,	5.335221f,		6.978365f,	7.336235f,
	3.988610f,	5.182446f,		5.834768f,	6.079107f,		2.810523f,	3.380836f,		3.517972f,	4.543930f,
	1.759494f,	3.019331f,		1.800153f,	2.549609f,		1.293301f,	1.873380f,		1.336522f,	2.141584f,
	5.493006f,	5.170730f,		6.794003f,	7.067935f,		6.196075f,	6.373398f,		8.388807f,	8.353716f,
	5.531872f,	6.553019f,		10.228961f,	10.205036f,		3.386046f,	3.585004f,		4.182162f,	4.892637f,
	6.124418f,	7.275644f,		8.301642f,	6.689528f,		5.992586f,	6.540672f,		8.595842f,	8.798488f,
	5.896728f,	6.196456f,		8.087354f,	8.518638f,		4.082417f,	4.502964f,		4.425118f,	5.103052f,
	5.935553f,	8.742558f,		8.656770f,	8.345509f,		5.465423f,	6.080284f,		8.349474f,	8.813871f,
	5.491230f,	6.003556f,		7.947158f,	8.316329f,		4.011832f,	4.502695f,		4.394757f,	4.981401f,
	5.212741f,	6.984676f,		7.670221f,	8.389321f,		5.262820f,	5.637581f,		7.697668f,	7.904798f,
	5.396863f,	5.636827f,		7.418869f,	7.791397f,		3.825180f,	4.230902f,		4.171672f,	4.682119f,
	5.287571f,	6.792164f,		7.245763f,	8.441580f,		5.146977f,	5.369198f,		7.533976f,	7.697230f,
	5.535198f,	5.451342f,		6.928858f,	7.334621f,		3.779690f,	4.587798f,		4.075696f,	4.652237f,
	5.745543f,	15.301677f,		7.450886f,	9.147325f,		5.320001f,	5.788001f,		8.675841f,	8.504035f,
	5.159706f,	7.942382f,		7.759199f,	8.348931f,		3.408753f,	4.224255f,		4.315770f,	6.141899f,
	6.379532f,	5.430963f,		7.600585f,	8.954492f,		5.578843f,	7.803532f,		11.199981f,	11.340806f,
	6.756924f,	7.874408f,		7.685980f,	9.023162f,		6.860593f,	7.364666f,		9.984039f,	10.314821f,
	7.707611f,	7.399648f,		10.170053f,	9.497865f,		6.870035f,	7.254215f,		9.678839f,	9.955758f,
	6.568755f,	8.706899f,		9.805034f,	9.764372f,		6.197053f,	6.835455f,		9.664042f,	9.924579f,
	6.388192f,	7.220493f,		8.879043f,	9.946154f,		6.036889f,	6.237898f,		9.034454f,	9.591701f,
	5.802336f,	6.238041f,		8.466527f,	8.098850f,		5.916208f,	6.428825f,		8.301669f,	8.681537f,
	6.206759f,	7.489282f,		8.279752f,	9.929441f,		6.464228f,	6.076727f,		8.182190f,	8.719975f,
	6.547047f,	16.380129f,		9.381901f,	11.717133f,		5.341038f,	7.379502f,		9.502243f,	10.261547f
};
*/

// ТАБЛИЦА ДИСПЕРСИЙ ЧУЖОГО, ВЫЧИСЛЕННАЯ НА 210 ОБРАЗАХ С ВРЕМЕНЕМ
static const float outsiderDisp[NCFOURIER_COUNT] = {
	11.2996f,	10.9355f,	6.7645f,	9.2029f,	4.5237f,	6.6376f,	5.2572f,	6.9591f,
	3.9357f,	5.1149f,	5.7087f,	6.2259f,	3.3292f,	3.9590f,	5.2749f,	5.2707f,
	3.7988f,	4.2812f,	5.0838f,	5.0832f,	3.4841f,	3.7982f,	4.9341f,	5.4892f,
	3.1724f,	3.3517f,	4.3813f,	4.4276f,	2.9028f,	3.1716f,	4.1664f,	4.6368f,
	2.9113f,	2.9419f,	4.2625f,	4.0885f,	2.4476f,	2.7033f,	3.8019f,	3.8143f,
	2.1947f,	2.4425f,	3.1598f,	3.9546f,	1.9130f,	1.9726f,	2.6526f,	2.9577f,
	1.6456f,	1.6669f,	2.3471f,	2.2497f,	1.3479f,	1.4811f,	1.8514f,	2.0257f,
	1.1316f,	1.2921f,	1.4380f,	1.7525f,	0.8742f,	1.0822f,	1.3592f,	1.4222f,
	11.2872f,	10.9291f,	6.7614f,	9.1979f,	4.5212f,	6.6120f,	5.2555f,	6.9447f,
	3.9329f,	5.0989f,	5.7002f,	6.2206f,	3.3291f,	3.9513f,	5.2775f,	5.2651f,
	3.8034f,	4.2785f,	5.0752f,	5.0772f,	3.4826f,	3.7966f,	4.9273f,	5.4906f,
	3.1805f,	3.3491f,	4.3705f,	4.4265f,	2.8984f,	3.1696f,	4.1595f,	4.6362f,
	2.9135f,	2.9394f,	4.2767f,	4.0842f,	2.4511f,	2.7014f,	3.8015f,	3.8167f,
	2.1884f,	2.4414f,	3.1394f,	3.9485f,	1.9123f,	1.9712f,	2.6460f,	2.9523f,
	1.6395f,	1.6605f,	2.3398f,	2.2444f,	1.3449f,	1.4734f,	1.8461f,	2.0197f,
	1.1264f,	1.2888f,	1.4243f,	1.7464f,	0.8696f,	1.0791f,	1.3575f,	1.4209f,
	6.9340f,	10.4838f,	8.2385f,	10.5199f,	5.0612f,	7.4407f,	7.9550f,	9.0372f,
	4.8603f,	6.4581f,	7.7685f,	8.6345f,	3.9922f,	4.9592f,	6.4506f,	7.7416f,
	3.3967f,	3.7362f,	5.7375f,	5.5827f,	2.5890f,	3.1044f,	3.9786f,	4.3149f,
	1.7740f,	2.3259f,	2.7256f,	3.0098f,	1.1307f,	1.7657f,	1.8815f,	1.9582f,
	7.0633f,	8.6782f,	6.9753f,	8.9458f,	4.6823f,	5.3025f,	6.8118f,	6.6316f,
	4.6955f,	4.8758f,	6.5084f,	6.6145f,	4.0575f,	4.3204f,	5.1170f,	6.5251f,
	3.5072f,	3.6489f,	5.3521f,	5.5644f,	2.7804f,	2.9303f,	3.6274f,	4.3771f,
	2.0508f,	2.0087f,	2.6848f,	2.9802f,	1.3426f,	1.5212f,	1.9997f,	2.3054f,
	6.3496f,	12.5903f,	7.0910f,	8.4313f,	4.4952f,	6.5064f,	6.3470f,	6.7709f,
	4.7925f,	5.4581f,	5.3208f,	5.8980f,	3.8878f,	4.5544f,	5.0656f,	5.0133f,
	3.6690f,	4.0115f,	5.0133f,	4.9308f,	2.9471f,	3.1724f,	3.9525f,	4.1943f,
	1.9052f,	2.2655f,	2.5745f,	2.8528f,	1.4205f,	2.0935f,	1.8712f,	2.2626f,
	8.5206f,	15.6325f,	8.3784f,	13.6421f,	5.3785f,	6.9127f,	7.2939f,	8.6477f,
	4.6414f,	6.4990f,	7.2669f,	8.3490f,	4.3915f,	4.9359f,	6.2271f,	6.5705f,
	3.2453f,	4.5221f,	4.9496f,	5.8164f,	2.5684f,	2.9229f,	3.7885f,	4.2937f,
	1.7872f,	2.8139f,	2.6928f,	3.4356f,	1.2647f,	1.8900f,	1.8315f,	2.4089f,
	6.9893f,	10.1849f,	11.8251f,	10.8431f,	5.8612f,	7.4984f,	9.8554f,	10.5763f,
	4.5164f,	5.2094f,	8.0274f,	7.5235f,	3.3084f,	3.6180f,	5.0449f,	5.3351f,
	5.8618f,	8.8694f,	9.4591f,	10.5061f,	5.8398f,	7.5584f,	8.6354f,	9.7537f,
	4.6459f,	5.2468f,	7.6245f,	8.1776f,	3.1448f,	3.7139f,	4.5375f,	5.7242f,
	6.5653f,	8.1709f,	8.0851f,	10.7043f,	5.7242f,	6.4126f,	7.5021f,	7.9885f,
	4.6511f,	4.9260f,	6.5149f,	7.2006f,	3.1703f,	3.5392f,	4.5152f,	5.6226f,
	6.0332f,	8.2908f,	7.5967f,	8.9734f,	5.5668f,	6.4145f,	6.2447f,	6.7325f,
	4.1473f,	5.5166f,	5.8164f,	6.0925f,	3.2812f,	4.0674f,	4.6981f,	4.9908f,
	6.9344f,	10.7931f,	7.7843f,	8.8224f,	5.6628f,	6.6708f,	6.5178f,	7.7686f,
	4.8318f,	5.5324f,	5.9409f,	6.5509f,	3.4644f,	4.0288f,	4.4772f,	5.5259f,
	7.7195f,	17.3046f,	9.5701f,	14.7926f,	5.1531f,	6.6448f,	8.2934f,	8.9735f,
	4.9492f,	7.0860f,	7.7321f,	8.5950f,	3.3635f,	3.9843f,	4.7005f,	6.4036f,
	7.5718f,	10.7625f,	11.4976f,	14.8253f,	6.1198f,	7.0894f,	10.3281f,	10.274f,
	7.1142f,	8.5587f,	11.2606f,	13.7159f,	5.4901f,	6.7247f,	8.1731f,	10.865f,
	6.7862f,	8.8264f,	10.8475f,	9.9698f,	5.5053f,	6.9650f,	7.4204f,	10.5451f,
	7.2386f,	8.1429f,	9.2799f,	11.1154f,	5.3443f,	6.7993f,	7.2904f,	9.3919f,
	6.5218f,	7.9705f,	8.5283f,	9.2825f,	5.2639f,	6.0969f,	6.9602f,	7.4591f,
	6.3925f,	9.4249f,	8.3700f,	9.2680f,	5.6300f,	6.8717f,	6.5616f,	7.2589f,
	7.3008f,	9.9160f,	8.5994f,	10.008f,	5.9665f,	7.0556f,	7.3002f,	7.7429f,
	7.1564f,	17.901f,	9.0265f,	16.1026f,	5.6488f,	6.7282f,	9.0409f,	9.2540f
};

/*
// Таблица дисперсий "Чужого"
static const float outsiderDisp[NCFOURIER_COUNT] = {
	5.73681f, 15.5344f, 7.0162f,  5.934f,   4.39565f, 8.76209f, 6.93348f, 5.0858f,
	3.41645f, 6.71644f, 5.74179f, 6.81825f, 4.17259f, 5.38082f, 5.84474f, 6.89322f,
	4.28507f, 4.55684f, 6.26481f, 5.46949f, 3.55238f, 4.6262f,  5.16951f, 5.58627f,
	3.30391f, 4.39561f, 4.4832f,  5.12296f, 3.33313f, 4.25367f, 4.75461f, 5.52846f,
	3.54247f, 3.75519f, 4.72346f, 4.89874f, 3.02807f, 3.3807f,  3.81518f, 5.09094f,
	2.52057f, 2.85741f, 3.76527f, 3.30336f, 1.94907f, 2.4565f,  2.73069f, 2.96504f,
	1.52096f, 1.82656f, 2.07551f, 2.35627f, 1.01266f, 1.81758f, 1.49562f, 2.18708f,
	1.13051f, 1.50502f, 1.36307f, 1.68876f, 0.97762f, 1.45706f, 1.10747f, 1.60498f,
	5.72072f, 15.5206f, 7.01761f, 5.93533f, 4.3943f,  8.71445f, 6.9342f,  5.09151f,
	3.41178f, 6.68758f, 5.74733f, 6.81855f, 4.17039f, 5.36795f, 5.84865f, 6.89499f,
	4.28571f, 4.54505f, 6.25181f, 5.46808f, 3.54938f, 4.62121f, 5.16474f, 5.58825f,
	3.31269f, 4.38469f, 4.4805f,  5.11927f, 3.32828f, 4.25122f, 4.74451f, 5.51314f,
	3.54601f, 3.75653f, 4.73006f, 4.89053f, 3.03093f, 3.37196f, 3.81877f, 5.08665f,
	2.5198f,  2.84804f, 3.75493f, 3.29869f, 1.94196f, 2.45482f, 2.7097f,  2.96248f,
	1.52819f, 1.82342f, 2.08507f, 2.34503f, 1.00635f, 1.81141f, 1.48447f, 2.17889f,
	1.12481f, 1.5024f,  1.36005f, 1.6851f,  0.97664f, 1.45504f, 1.11839f, 1.59648f,
	6.15339f, 10.4857f, 10.4524f, 8.16937f, 5.80457f, 8.48793f, 8.12838f, 11.7441f,
	5.40617f, 6.60209f, 8.44739f, 8.77371f, 5.09338f, 5.35992f, 7.94398f, 8.60124f,
	4.61957f, 5.24193f, 5.74451f, 7.25343f, 2.57535f, 3.57779f, 4.13919f, 4.97413f,
	1.62446f, 2.45749f, 2.353f,   3.1581f,  1.41086f, 2.01733f, 1.88795f, 2.55681f,
	5.55487f, 10.5116f, 9.15688f, 8.81011f, 5.4851f,  6.31095f, 8.54954f, 9.16736f,
	5.11146f, 5.96073f, 7.34617f, 7.1819f,  4.6047f,  5.32179f, 5.29603f, 7.17798f,
	4.25454f, 4.62933f, 5.80346f, 6.36966f, 2.89576f, 2.87778f, 3.56088f, 4.17342f,
	1.55056f, 2.15113f, 1.97699f, 2.67803f, 1.36405f, 1.92404f, 1.38546f, 2.07885f,
	5.75141f, 9.29665f, 7.91841f, 7.38827f, 5.53184f, 5.6021f,  7.54347f, 7.36142f,
	4.44498f, 5.49726f, 7.18343f, 6.61269f, 4.30642f, 5.39941f, 4.88895f, 6.19635f,
	3.98805f, 4.40869f, 5.25958f, 6.1667f,  2.65487f, 3.29453f, 3.77095f, 4.34995f,
	1.53445f, 2.47901f, 2.22188f, 2.54991f, 1.30725f, 1.86532f, 1.41057f, 2.20858f,
	7.25598f, 23.2289f, 9.65878f, 7.11031f, 5.31957f, 7.21099f, 6.93589f, 9.50137f,
	4.54893f, 9.06379f, 7.75495f, 7.5488f,  5.24651f, 5.57021f, 7.1627f,  8.64315f,
	3.78153f, 5.70939f, 5.8408f,  7.02204f, 2.64804f, 3.76394f, 4.18228f, 4.40918f,
	1.74327f, 3.66617f, 2.39687f, 3.83343f, 1.45915f, 2.23577f, 1.76712f, 2.80626f,
	6.71819f, 11.0769f, 11.2516f, 12.4834f, 7.03781f, 8.6249f,  11.7576f, 11.5495f,	
	6.55359f, 6.17971f, 9.77814f, 9.73013f, 3.50414f, 4.1753f, 	5.45763f, 5.7413f,
	6.94465f, 8.80698f, 10.7383f, 12.2788f, 6.66355f, 7.29687f, 9.25656f, 10.2919f,
	5.91901f, 7.00504f, 8.23501f, 8.57057f, 3.5502f,  4.25233f, 4.8417f,  6.15116f,
	6.86378f, 9.52351f, 11.0569f, 12.4848f, 5.71998f, 6.85455f, 9.17986f, 8.89485f,
	5.25609f, 6.23312f, 7.38997f, 7.5394f,  3.54998f, 3.9845f, 	4.25916f, 5.30462f,
	5.66345f, 8.18899f, 8.32451f, 10.5749f, 5.88259f, 7.06306f, 8.6271f,  8.91978f,
	5.71666f, 6.31002f, 7.39038f, 6.86096f, 3.12907f, 4.04227f, 4.40331f, 5.34422f,
	5.3585f,  8.57208f, 8.31403f, 8.69514f, 5.48579f, 5.99509f, 7.27371f, 6.837f,
	5.10831f, 5.435f, 	6.72283f, 6.97766f, 3.16312f, 3.9411f, 	4.25712f, 5.01996f,
	5.83353f, 25.9446f, 9.43374f, 10.087f, 	6.00082f, 7.28395f, 9.45344f, 8.98258f,
	5.29285f, 9.96808f, 8.55395f, 10.7828f, 3.06674f, 3.75079f, 5.07718f, 6.08308f,
	8.57435f, 11.4184f, 10.8909f, 17.6435f, 8.16044f, 8.7063f, 	13.3451f, 12.5315f,
	8.72867f, 9.39393f, 12.0016f, 13.3537f, 7.39382f, 7.72311f, 9.43161f, 10.9338f,
	6.97618f, 9.14143f, 11.087f,  13.2025f, 6.65736f, 6.62363f, 7.88916f, 11.3746f,
	7.02107f, 9.51499f, 12.6599f, 14.2638f, 6.32225f, 7.04175f, 8.67511f, 9.18185f,
	7.97745f, 7.75278f, 11.5944f, 11.7019f, 6.6722f,  7.5944f, 	7.86889f, 9.7809f,
	6.9635f,  7.50545f, 9.70292f, 8.68052f, 5.96157f, 7.51819f, 6.2906f,  9.10216f,
	6.23189f, 8.04871f, 8.65947f, 9.23061f, 5.97701f, 6.24451f, 6.56738f, 9.43408f,
	6.92277f, 27.5467f, 10.5639f, 12.6087f, 6.31289f, 6.90702f, 10.1331f, 11.0423f
};
*/
// Создание массива случайных коэффициентов Фурье, лежащих в диапазоне 3 сигма
// дисперсии чужого
// imageCount   - [in]  количество образов, которые должна сгенерировать функция
// randFCoefArr - [out] массив размера 416*imageCount случайных коэф-ов
void CalculateWhiteNoiseCoeff ( UINT imageCount, float randFCoefArr[] )
{
	//srand(::GetTickCount());
	//float fRandomInput;		// случайный коэффициент Фурье
	//for ( unsigned iCount = 0; iCount < imageCount; iCount++ )
	//{
	//	for( unsigned jCount = 0; jCount < NCFOURIER_COUNT; jCount++ )
	//	{
	//		// Вычисляем диапазон 3 сигма данного входа
	//		fRandomInput = 3.0f*(float)ceil(outsiderDisp[jCount]);
	//		// Вычисление случайного входа, лежащего в диапазоне от -3сигма до +3сигма
	//		fRandomInput *= ( rand()%1000 - rand()%1000 )/1000.f;
	//		randFCoefArr[iCount*NCFOURIER_COUNT +jCount] = fRandomInput;
	//	}
	//}
	using namespace random;
	FsrandMT(::GetTickCount());
	float fRandomInput;		// случайный коэффициент Фурье
	for ( unsigned iCount = 0; iCount < imageCount; iCount++ )
	{
		for( unsigned jCount = 0; jCount < NCFOURIER_COUNT; jCount++ )
		{
			// Вычисляем диапазон 3 сигма данного входа
			fRandomInput = 3.0f*(float)ceil(outsiderDisp[jCount]);
			// Вычисление случайного входа, лежащего в диапазоне от -3сигма до +3сигма
			fRandomInput = (float)FrandMT(fRandomInput)*2-fRandomInput;
			randFCoefArr[iCount*NCFOURIER_COUNT +jCount] = fRandomInput;
		}
	}
}

// Протестировать обученную сеть на белом шуме
void NetTestOnWN (  UINT count, const NCKEY key, const NCKEY mixKey,
					const NCWEIGHTS weights, BNCMOMENTS &params )
{
	float *coefArr = new float [count*NCFOURIER_COUNT]; // функционалы всех образов

	// Вычисление случайных коэффициентов Фурье
	CalculateWhiteNoiseCoeff ( count, coefArr );
//////////////////////////////////////////////////////////////////////////
//	float probArr[NEURON_COUNT]; // вероятности появления ноликов на выходе всех нейронов
//	LayerSimulationForProb ( FALSE, count, coefArr, weights, probArr );
//////////////////////////////////////////////////////////////////////////
	// Тестирование
	NetTestOnTF ( count, key, mixKey, weights, coefArr, params );

	delete [] coefArr;
}	

// Протестировать обученную сеть на тестовом множестве
void NetTestOnTF (
				  UINT count, const NCKEY key, const NCKEY mixKey,
				  const NCWEIGHTS weights, const float coefs[], 
				  BNCMOMENTS &params )
{
	int *xemmingArr = new int [count];

	// Вычисляем меры Хемминга на случайных образах
	NetRecognition ( count, coefs, weights, key, mixKey, xemmingArr );//рабочий вариант
//	NetRecognition_P ( count, coefs, weights, key, mixKey, xemmingArr, params.p01, params.tmpKey );//для экспериментов

	for ( UINT i = 0; i < count; i++ )
		params.X[i] = xemmingArr[i];
		
	//memcpy(params.X, xemmingArr, count*sizeof(INT));
	// Вычисляем качество мер Хемминга
	fadq ( count, xemmingArr, params ); 

	delete [] xemmingArr;
}

// Определить группу стойкости пользователя
int CalculateStabilityGroup (
							 const NCKEY key, const NCKEY mixKey, 
							 const NCWEIGHTS weights ) 
{
	// Вычисляем качество мер Хемминга на белом шуме
	BNCMOMENTS params;	// параметры мер Хемминга
	int   imageCount = 1000;		  // количество тестовых примеров
	NetTestOnWN ( imageCount, key, mixKey, weights, params );

// ВАРИАНТ ДЛЯ СЕТИ С МЕШАЛКОЙ
//	Пользователи поделены на 7 групп стабильности
//	(в зависимости от качества мер Хемминга):
//	7 группа:	от 3 до 7
//	6 группа:	от 7 до 12
//	5 группа:	от 12 до 14
//	4 группа:	от 14 до 16
//	3 группа:	от 16 до 17 
//	2 группа:	от 17 до 18
//	1 группа:	от 18 до ... 
	int stabGroup = 8;	// группа стойкости
/*	if ( params.fqual < 16.0f ) {
		if ( params.fqual < 12.0f ) {
			if ( params.fqual < 7.0f )   stabGroup = 7;		// 7 группа
			else					     stabGroup = 6;		// 6 группа
		} else {
			if ( params.fqual < 14.0f )  stabGroup = 5;		// 5 группа
			else						 stabGroup = 4;		// 4 группа
		}
	} else {
		if ( params.fqual < 17.0f )		 stabGroup = 3;			// 3 группа
		else if ( params.fqual < 18.0f ) stabGroup = 2;			// 2 группа
			else						 stabGroup = 1;		// 1 группа
	}
*/
// ВАРИАНТ ДЛЯ СЕТИ БЕЗ МЕШАЛКИ
//Пользователи поделены на 7 групп стабильности (в зависимости от качества мер Хемминга):
//	7 группа	от 0	до 5
//	6 группа	от 5	до 5,45
//	5 группа	от 5,45	до 6,7
//	4 группа	от 6,7	до 8,17
//	3 группа	от 8,17	до 9,56
//	2 группа	от 9,56	до 11,1
//	1 группа	от 11,1	до 15
	if		( params.fqual < 5.0f )							  stabGroup = 7;	// 7 группа
	else if ( params.fqual >= 5.0f && params.fqual < 5.45f )  stabGroup = 6;	// 6 группа
	else if ( params.fqual >= 5.45f && params.fqual < 6.7f )  stabGroup = 5;	// 5 группа
	else if ( params.fqual >= 6.7f && params.fqual < 8.17f )  stabGroup = 4;	// 4 группа
	else if ( params.fqual >= 8.17f && params.fqual < 9.56f ) stabGroup = 3;	// 3 группа
	else if ( params.fqual >= 9.56f && params.fqual < 11.1f ) stabGroup = 2;	// 2 группа
	else if ( params.fqual >= 11.1f )						  stabGroup = 1;	// 1 группа

	return stabGroup;
}
