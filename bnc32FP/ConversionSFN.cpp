//файл:			ConversionSFN.cpp
//описание:		преобразование координат рукописных образов в функционалы.		
//				Преобразуем координаты X, Y и отсчёты времени в коэффициенты 
//				Фурье


#include <memory.h>
#include "conversionsfn.h"
#include "ncmath.h"
#include <iostream>
#include <fstream>

//////////////////////////////////////////////////////////////////////////
#include <wchar.h>
#include <stdio.h>
#include <string> 
//////////////////////////////////////////////////////////////////////////

// Таблица мат. ожиданий чужого
/*
// Вычислены на всех образах из папочки "5 букв"
static float tableMo[] = {
	-1.916894f, -29.080721f, -0.807460f, 0.032720f, -1.056241f, -15.008464f, -0.477780f, 0.014235f,
	-0.470141f, -10.243851f, -0.763886f, 0.081191f, 0.047396f, -7.652979f, -0.882282f, -0.154828f,
	0.495014f, -5.509049f, -1.024238f, -0.424541f, 0.350061f, -4.558445f, -0.831133f, -0.548109f,
	0.429506f, -3.597822f, -0.973051f, -0.863846f, 0.219535f, -2.820692f, -0.604176f, -1.147709f,
	0.050133f, -2.407665f, -0.455021f, -1.041039f, -0.152818f, -2.133879f, -0.287544f, -0.727002f,
	-0.299286f, -1.908486f, -0.282345f, -0.545059f, -0.418068f, -1.918322f, -0.243701f, -0.369101f,
	-0.478762f, -1.864346f, -0.233974f, -0.261477f, -0.414878f, -1.722220f, -0.235528f, -0.258240f,
	-0.412659f, -1.612408f, -0.209655f, -0.239850f, -0.420384f, -1.517463f, -0.192479f, -0.210906f,
	1.437514f, 29.055077f, 0.472757f, -0.031243f, -1.054216f, -14.895717f, -0.475520f, 0.016359f,
	-0.008666f, 10.189385f, 0.426356f, -0.077405f, 0.040439f, -7.620361f, -0.880000f, -0.148280f,
	-0.970173f, 5.500625f, 0.687610f, 0.429035f, 0.344396f, -4.545159f, -0.831214f, -0.537222f,
	-0.907775f, 3.612684f, 0.640385f, 0.869691f, 0.220293f, -2.815174f, -0.610890f, -1.137528f,
	-0.533896f, 2.432738f, 0.126575f, 1.059296f, -0.147272f, -2.128138f, -0.296135f, -0.725048f,
	-0.186866f, 1.939128f, -0.045910f, 0.573610f, -0.411729f, -1.908860f, -0.252112f, -0.370119f,
	-0.005146f, 1.902720f, -0.094100f, 0.295283f, -0.411285f, -1.714997f, -0.243794f, -0.257624f,
	-0.070010f, 1.659887f, -0.117425f, 0.278264f, -0.416815f, -1.511386f, -0.201029f, -0.210138f,
	-0.779991f, -16.374289f, -1.182426f, -0.062201f, 1.212165f, -8.930106f, -1.961393f, -0.164726f,
	1.235153f, -4.874324f, -1.799473f, -0.910242f, 0.913866f, -2.566727f, -1.135473f, -1.927737f,
	0.100151f, -1.720526f, -0.150083f, -1.345488f, -0.500649f, -1.604988f, -0.072670f, -0.839912f,
	-0.390699f, -1.609667f, -0.211361f, -0.646738f, -0.389268f, -1.412171f, -0.180644f, -0.558062f,
	-0.633718f, -14.412262f, -0.455495f, 0.084266f, -0.547981f, -7.433709f, -0.187577f, -0.031002f,
	-0.236266f, -4.545465f, -0.434832f, -0.128197f, -0.457907f, -3.405890f, -0.068017f, -0.130350f,
	-0.414235f, -2.736212f, -0.204090f, -0.121685f, -0.425139f, -2.367440f, -0.152968f, -0.038946f,
	-0.474580f, -2.034778f, -0.152393f, 0.004724f, -0.449840f, -1.760313f, -0.172678f, 0.007775f,
	-1.281903f, -13.533228f, 0.229731f, 0.091274f, -1.082812f, -6.459691f, 0.197015f, -0.143882f,
	-0.495774f, -4.286053f, 0.136073f, -0.184236f, -0.434323f, -3.102141f, -0.070889f, -0.369519f,
	-0.363486f, -2.566063f, -0.426104f, -0.120204f, -0.292665f, -2.246922f, -0.417699f, 0.090170f,
	-0.399325f, -1.851888f, -0.263506f, 0.122536f, -0.411463f, -1.640950f, -0.208701f, 0.129889f,
	1.738327f, 44.304260f, 0.738432f, -0.106628f, 0.683594f, -7.727974f, -1.571372f, -0.272231f,
	-1.459696f, 13.627327f, 1.418952f, 1.237903f, 0.930408f, -2.200569f, -1.134406f, -2.152184f,
	-0.284547f, 7.042200f, 0.110805f, 1.618654f, -0.364797f, -1.450618f, -0.341046f, -0.701299f,
	0.297620f, 5.555300f, -0.036572f, 0.579963f, -0.345366f, -1.266014f, -0.221792f, -0.431775f,
	0.566652f, -12.604377f, -2.330552f, 0.269967f, 2.317688f, -4.753848f, -2.770082f, -1.385786f,
	0.926257f, -1.397017f, -0.594854f, -2.578478f, -0.507531f, -1.181762f, -0.043534f, -1.217022f,
	-0.280961f, -9.698440f, -0.159593f, -0.337925f, -0.900729f, -5.013446f, 0.087948f, 0.124516f,
	-0.468332f, -3.215742f, -0.323116f, -0.082516f, -0.564027f, -2.445626f, -0.191820f, -0.145661f,
	-0.473672f, -9.413995f, -0.319186f, 0.084009f, -0.685198f, -5.117974f, 0.102578f, 0.100192f,
	-0.415283f, -3.304675f, -0.284316f, 0.022650f, -0.415724f, -2.505205f, -0.168831f, 0.064819f,
	-0.640036f, -9.211652f, -0.129518f, 0.132087f, -0.346422f, -4.931164f, -0.076611f, 0.202669f,
	-0.484212f, -3.202246f, -0.052412f, 0.231845f, -0.347192f, -2.438385f, -0.178376f, 0.129364f,
	-1.380394f, -8.595741f, 0.335971f, -0.081611f, -0.530898f, -3.919456f, 0.194132f, -0.302819f,
	-0.342610f, -2.523300f, -0.344296f, -0.631404f, -0.242889f, -2.047891f, -0.532974f, -0.077498f,
	-1.450190f, 49.641720f, 1.603891f, 0.109940f, 4.356403f, -2.990824f, -2.179971f, -2.289378f,
	-2.239620f, 13.298293f, 0.016029f, 3.149848f, 1.435787f, -0.675987f, -0.024738f, -1.081972f,
	2.708257f, -10.083961f, -3.526119f, -0.193625f, 2.329636f, -1.860555f, -2.163823f, -3.446898f,
	-1.101821f, -7.347043f, -0.067881f, -0.210557f, -0.391763f, -3.841727f, -0.357415f, -0.593483f,
	-0.253460f, -7.649191f, -0.386995f, -0.136582f, -0.471253f, -3.376410f, -0.121075f, -0.404807f,
	-0.264617f, -6.898390f, -0.460824f, 0.056289f, -0.605464f, -3.723158f, 0.081012f, 0.070730f,
	-0.814901f, -7.108305f, 0.015164f, 0.073963f, -0.429017f, -3.517922f, -0.015383f, 0.144523f,
	-0.217928f, -7.004748f, -0.070161f, 0.151788f, -0.525661f, -3.380981f, -0.044149f, -0.113163f,
	-1.322513f, -5.709508f, 0.378223f, -0.361242f, -0.435192f, -2.755770f, -0.118763f, -0.885160f,
	-0.647087f, 51.827682f, 2.780282f, 0.647329f, 2.502196f, -0.096388f, -2.061095f, -3.941334f,
};
*/
/*
// САМЫЕ ЛУЧШИЕ КОЭФФИЦИЕНТЫ (КАК ПОЛУЧИЛ НЕ ЗНАЮ)
static const float tableMo[NCFOURIER_COUNT] =  {
	-0.51816f, -56.2099f, -1.44766f, -0.78511f,  0.11180f, -28.6804f, -2.34166f, -1.61805f, 
	-0.20780f, -18.5145f, -1.54087f, -0.93747f, -0.51753f, -12.9187f, -1.10844f, -1.55893f, 
	-1.37805f, -9.58952f, -0.55821f, -0.28105f,  0.18287f, -9.32593f, -1.23127f,  0.10095f, 
	-0.47042f, -7.65633f, -0.65769f, -1.11345f, -0.64167f, -6.22118f, -0.45361f, -0.70869f, 
	-0.61119f, -5.19432f, -0.62121f, -1.35312f, -0.26583f, -4.77387f, -0.24796f, -1.94772f, 
	-0.59104f, -3.79463f,  0.23393f, -1.74788f, -0.82728f, -4.05543f, -0.01201f, -0.99644f, 
	-0.48422f, -3.63149f, -0.32381f, -1.05412f, -0.48795f, -3.40653f,  0.10810f, -1.15154f, 
	-0.64962f, -3.02779f,  0.02323f, -0.83909f, -0.45246f, -3.00493f, -0.12350f, -0.85588f, 
	 0.16869f, 56.15670f,  1.19981f,  0.78227f,  0.11297f, -28.4659f, -2.33745f, -1.60936f, 
	-0.14349f, 18.40080f,  1.29028f,  0.93000f, -0.51283f, -12.8591f, -1.11000f, -1.54838f, 
	 1.02787f,  9.54373f,  0.31317f,  0.28323f,  0.18266f, -9.29078f, -1.23530f,  0.11924f, 
	 0.11419f,  7.64339f,  0.42099f,  1.10977f, -0.64129f, -6.20480f, -0.46022f, -0.68711f, 
	 0.25807f,  5.19743f,  0.38741f,  1.34243f, -0.26578f, -4.76433f, -0.26311f, -1.92586f, 
	 0.23205f,  3.80591f, -0.46579f,  1.75772f, -0.82825f, -4.03909f, -0.01714f, -0.98834f, 
	 0.13312f,  3.65221f,  0.09073f,  1.06572f, -0.48662f, -3.39481f,  0.09701f, -1.14534f, 
	 0.29788f,  3.05522f, -0.26191f,  0.86164f, -0.45597f, -2.99178f, -0.12838f, -0.85008f, 
	 1.71264f, -28.6219f, -4.10081f, -1.92407f,  1.49421f, -12.2780f, -2.19986f, -2.68187f, 
	 0.46829f, -9.86780f, -3.03747f, -0.51443f,  0.46078f, -6.30913f, -1.81257f, -1.39581f, 
	 0.45043f, -4.89405f, -1.28013f, -3.02776f, -0.86388f, -4.21011f, -0.07365f, -1.20224f, 
	-0.34002f, -3.41580f,  0.02862f, -1.68691f, -0.46380f, -3.22826f, -0.21010f, -1.03206f, 
	-0.69104f, -27.6844f,  0.62826f,  0.46382f, -0.11634f, -14.0986f, -0.10505f, -1.11167f, 
	-1.78102f, -8.23648f,  0.75149f, -0.74250f, -0.85675f, -6.53056f,  0.33866f,  0.59179f, 
	-1.04704f, -4.88715f,  0.10966f,  0.38652f, -0.95669f, -4.85528f, -0.09868f,  0.53845f, 
	-0.70499f, -3.80406f, -0.45768f,  0.35890f, -0.48913f, -3.49314f, -0.25622f,  0.00467f, 
	-1.39617f, -28.5240f, -0.57267f, -1.31079f, -2.44054f, -13.7260f, -0.02645f, -0.44513f, 
	-0.01682f, -8.84865f,  0.56163f,  0.71062f, -1.66212f, -6.19811f,  0.89844f, -0.00504f, 
	-0.91008f, -4.69724f,  0.79680f, -0.85533f, -0.71540f, -3.93770f,  0.06203f, -0.79801f, 
	-0.56422f, -3.42827f,  0.20251f, -0.61551f, -0.37107f, -2.80680f, -0.01868f, -0.68614f, 
	-0.32525f, 84.78850f,  3.55156f,  2.77045f, -0.83423f, -11.4653f, -2.09499f, -1.98643f, 
	 0.62168f, 26.76670f,  1.22055f,  0.53696f, -0.34336f, -5.84564f, -1.25475f, -1.96676f, 
	 0.79725f, 14.42250f, -0.11572f,  3.50732f, -0.61205f, -3.22471f,  0.06978f, -2.50339f, 
	 0.90545f, 10.64760f, -0.26038f,  1.96841f, -0.33263f, -2.49288f,  0.01289f, -1.70610f, 
	 3.62457f, -17.6767f, -4.91696f, -3.90123f,  0.57264f, -9.51692f, -3.83817f, -1.43018f, 
	 0.59175f, -5.12811f, -3.28179f, -3.22860f, -0.82007f, -3.55892f, -0.17378f, -1.93399f, 
	-1.37236f, -18.8283f,  0.31666f,  0.05768f, -0.16516f, -11.5103f, -1.57757f,  1.10347f, 
	-0.10927f, -6.73764f,  0.70849f,  0.02003f, -1.13172f, -5.67084f, -0.04076f,  1.23439f, 
	-1.24925f, -18.2217f,  0.47289f,  1.34632f,  0.58064f, -10.0756f, -0.66032f,  0.57371f, 
	-0.71614f, -6.07870f, -0.16620f, -0.40219f, -0.56897f, -5.33452f, -0.11413f,  0.00713f, 
	-0.46192f, -18.1883f, -0.29303f, -1.41218f,  1.27311f, -9.58666f,  0.06675f,  0.04262f, 
	-0.49292f, -6.75293f, -0.28077f, -0.36045f, -0.51839f, -4.92353f, -0.34882f, -0.22089f, 
	-2.57063f, -19.4138f, -0.41316f, -0.25901f, -0.22956f, -8.46830f,  0.31068f,  1.18904f, 
	-1.64164f, -4.70743f,  1.44459f, -0.09693f, -0.94894f, -3.47508f,  0.25179f, -0.90140f, 
	-2.78086f, 92.48720f,  3.60573f,  4.45267f,  3.56832f, -6.02812f, -2.09700f, -1.17627f, 
	-2.18144f, 28.82930f, -0.30169f,  4.55004f,  2.81034f, -1.34995f,  1.44212f, -3.67290f, 
	 2.10555f, -10.9121f, -3.74820f, -4.42633f,  1.88263f, -5.48693f, -4.77510f, -4.23696f, 
	-1.04962f, -16.6655f, -1.65155f,  1.07524f, -0.50011f, -6.58341f,  0.23086f, -0.16817f, 
	 0.91224f, -13.4176f, -0.61655f, -0.92434f, -0.89564f, -7.25020f,  1.13055f,  1.41482f, 
	-1.88208f, -13.2360f,  0.76679f,  1.11502f,  0.08578f, -7.72120f, -0.26512f,  1.15376f, 
	-1.09312f, -14.5669f,  0.40570f, -1.30133f, -0.76806f, -5.97016f, -0.45926f, -0.24578f, 
	 1.43658f, -14.6278f, -0.16027f, -0.23486f, -1.83072f, -7.28026f, -0.13753f, -0.56940f, 
	-3.73669f, -12.6743f, -0.45545f,  0.41986f, -2.55250f, -6.58595f,  2.24990f,  0.23763f, 
	 1.90762f, 96.08660f,  4.47428f,  4.29451f, -0.06896f, -2.90627f, -1.63188f, -3.14148f
};
*/
/**/
// ТАБЛИЦА МАТЕМАТИЧЕСКИХ ОЖИДАНИЙ ЧУЖОГО, ВЫЧИСЛЕННАЯ НА 210 ОБРАЗАХ С ВРЕМЕНЕМ
static float tableMo[] = {
	1.791182f, -51.189461f, -0.646653f, 1.687545f, 0.030207f, -24.751360f, -0.503438f, 0.369029f,
	0.054249f, -16.503284f, -1.144891f, -0.176236f, -0.332228f, -11.925951f, -0.633347f, -0.760707f,
	-0.379891f, -8.558290f, -0.670663f, -0.162676f, -0.299134f, -7.457535f, -0.396018f, -0.150990f,
	-0.240700f, -6.975634f, -0.466696f, 0.094552f, -0.330769f, -6.155512f, -0.496248f, 0.234345f,
	-0.541864f, -4.936377f, -0.131370f, -0.616639f, -0.418073f, -4.610250f, -0.355994f, -0.711633f,
	-0.459751f, -3.820334f, 0.066647f, -0.784420f, -0.291275f, -3.644536f, -0.143127f, -0.899480f,
	-0.446553f, -3.337785f, -0.055778f, -0.786436f, -0.393360f, -3.102766f, -0.011281f, -0.617515f,
	-0.420138f, -2.886050f, 0.001532f, -0.652605f, -0.383114f, -2.855894f, -0.190467f, -0.493295f,
	-2.043046f, 51.142406f, 0.414192f, -1.686446f, 0.027903f, -24.556660f, -0.500862f, 0.367016f,
	-0.307562f, 16.400211f, 0.910550f, 0.177054f, -0.326165f, -11.871788f, -0.632932f, -0.755340f,
	0.125691f, 8.516662f, 0.438065f, 0.166916f, -0.292668f, -7.423235f, -0.399547f, -0.144863f,
	-0.013862f, 6.951771f, 0.234762f, -0.086221f, -0.321764f, -6.136322f, -0.503526f, 0.248199f,
	0.286643f, 4.930401f, -0.097642f, 0.617175f, -0.410627f, -4.597291f, -0.364145f, -0.697562f,
	0.205986f, 3.825245f, -0.292540f, 0.790129f, -0.284165f, -3.630912f, -0.147937f, -0.888717f,
	0.190824f, 3.347776f, -0.169775f, 0.803754f, -0.386450f, -3.090714f, -0.016017f, -0.611946f,
	0.164927f, 2.899102f, -0.230988f, 0.676339f, -0.375563f, -2.843787f, -0.191584f, -0.492770f,
	1.689987f, -23.023567f, -1.940005f, 0.523033f, 1.299048f, -10.921855f, -1.370603f, -1.325474f,
	-0.357343f, -6.911455f, -0.973143f, -0.753660f, 0.336099f, -5.498888f, -1.615811f, -0.450779f,
	0.017429f, -4.259503f, -1.088693f, -1.231000f, -0.187201f, -3.352353f, -0.541206f, -1.119111f,
	-0.313715f, -2.859358f, -0.116951f, -0.822893f, -0.378914f, -2.614884f, -0.103370f, -0.523678f,
	0.426055f, -26.422449f, -0.598612f, 1.012905f, -0.409882f, -13.372650f, 0.227118f, 0.081564f,
	-0.403714f, -8.521648f, -0.217976f, 0.579558f, -0.392040f, -6.411464f, -0.245891f, 0.719377f,
	-0.588485f, -4.583320f, 0.307480f, 0.125982f, -0.329174f, -4.213634f, -0.222123f, 0.035560f,
	-0.519725f, -3.542564f, -0.102693f, 0.005103f, -0.432480f, -3.226818f, -0.222988f, 0.163745f,
	-1.552861f, -26.284264f, 0.934989f, 0.211413f, -1.880615f, -13.070383f, 0.105684f, -0.191736f,
	-0.165142f, -8.065779f, 0.174503f, 0.448077f, -0.911877f, -6.855557f, 0.610294f, 0.925747f,
	-0.774560f, -5.002874f, 0.376293f, -0.182068f, -0.321188f, -3.964785f, 0.264881f, -0.677401f,
	-0.398548f, -3.371415f, 0.102706f, -0.413924f, -0.309416f, -3.118819f, -0.265715f, -0.472129f,
	-1.067304f, 75.689285f, 1.138641f, -1.744220f, -0.172662f, -10.240430f, -1.487004f, -1.599105f,
	0.417608f, 23.318188f, 0.544451f, -0.266418f, -0.178503f, -5.827732f, -0.757876f, -0.230899f,
	0.837273f, 13.782044f, -0.060030f, 1.306872f, -0.172640f, -3.034979f, -0.057693f, -1.815096f,
	0.722543f, 9.758853f, -0.344178f, 1.261508f, -0.248698f, -2.457068f, -0.149696f, -1.149729f,
	1.977909f, -14.368752f, -3.266633f, -0.875158f, -0.382630f, -6.148414f, -1.177633f, -0.766861f,
	0.341597f, -4.008241f, -2.086550f, -1.502922f, -0.001458f, -2.739053f, -0.652008f, -1.732981f,
	0.105308f, -15.707653f, 0.873907f, 0.440760f, -0.928509f, -8.138562f, -0.042054f, 0.089290f,
	-0.277851f, -5.894040f, -0.088435f, 0.576519f, -0.460133f, -4.279377f, -0.275352f, 0.428898f,
	0.028393f, -17.424114f, -0.738411f, 1.002003f, -0.433784f, -9.048843f, 0.104850f, 0.078672f,
	-0.659737f, -5.571154f, 0.429196f, -0.255681f, -0.258170f, -4.637680f, -0.305439f, -0.087199f,
	-1.301875f, -17.433170f, 0.045199f, 0.681381f, 0.022639f, -8.726046f, 0.304225f, 0.475488f,
	-0.184637f, -6.460355f, -0.629704f, 0.740939f, -0.089680f, -4.630176f, -0.156297f, 0.005000f,
	-1.592782f, -17.439127f, 0.474130f, -0.654172f, -0.023192f, -7.285391f, -0.291053f, 0.264493f,
	-1.214172f, -5.434156f, 1.190199f, 0.246175f, -0.581144f, -3.555190f, 0.705202f, -0.690124f,
	-3.464179f, 82.477364f, 1.728410f, -0.405771f, 3.464346f, -4.852901f, -1.403768f, -1.156882f,
	-2.162737f, 26.955780f, 0.052593f, 0.564534f, 2.997354f, -1.540930f, 0.808804f, -2.965017f,
	2.354977f, -9.136703f, -3.067344f, -2.323127f, 0.558768f, -5.063962f, -2.760570f, -1.155754f,
	-1.284423f, -11.800543f, -0.001905f, 1.506020f, 0.216007f, -6.286127f, -0.621561f, 0.883519f,
	0.269815f, -12.526342f, 0.342350f, -0.330822f, 0.174634f, -6.048085f, -0.486271f, 0.236242f,
	-0.060712f, -13.054205f, -0.859957f, 1.060892f, -0.270254f, -7.100678f, -0.521723f, 0.575524f,
	-1.048267f, -14.015954f, 0.115014f, 0.486405f, -0.918266f, -6.921566f, -0.007851f, 1.199168f,
	0.748585f, -12.942032f, 0.237953f, 0.611521f, -1.005493f, -7.561475f, 0.266011f, 0.742067f,
	-2.662849f, -11.928018f, 0.091827f, -0.871239f, -0.889627f, -6.934900f, 1.224508f, 0.653626f,
	0.674803f, 85.381355f, 2.212761f, -0.116330f, -0.005328f, -3.280668f, -1.126140f, -1.212602f,
};
/**/
/*
// ТАБЛИЦА МАТЕМАТИЧЕСКИХ ОЖИДАНИЙ, ПОЛУЧЕННАЯ НА ОБРАЗАХ С ДАВЛЕНИЕМ
static float tableMo[] = {
	-4.709076f, -484.055420f, 4.095481f, -6.249572f, -1.541248f, -247.052338f, 1.748909f, 0.104726f,
	-2.301996f, -162.650406f, 1.386156f, -0.895160f, -3.261121f, -115.787445f, 0.778406f, 1.304160f,
	-3.021479f, -88.593292f, 2.359485f, 1.332472f, -2.339987f, -73.899681f, 2.270462f, 4.137680f,
	-2.522344f, -63.379002f, 1.994380f, 4.746096f, -4.708753f, -54.009521f, -0.613426f, 7.892450f,
	-4.469215f, -47.773483f, -2.123088f, 7.120183f, -4.187171f, -42.617462f, -2.164058f, 7.762444f,
	-5.230989f, -38.800629f, -3.885566f, 6.783556f, -5.542668f, -36.448414f, -4.327788f, 4.865017f,
	-6.334867f, -33.067890f, -4.584287f, 4.629292f, -5.768531f, -30.830196f, -4.286107f, 3.808740f,
	-5.743383f, -29.079269f, -3.489156f, 2.943722f, -5.303910f, -27.207417f, -2.628034f, 3.242992f,
	-0.415151f, 483.611389f, -8.288639f, 6.291420f, -1.537432f, -245.184280f, 1.733611f, 0.106440f,
	-2.836642f, 161.704941f, -5.578481f, 1.025674f, -3.257596f, -115.231606f, 0.775381f, 1.260410f,
	-2.121826f, 88.303307f, -6.555176f, -1.102179f, -2.328928f, -73.595131f, 2.285005f, 4.056520f,
	-2.641220f, 63.345867f, -6.221283f, -4.420484f, -4.671747f, -53.806335f, -0.550465f, 7.795875f,
	-0.690675f, 47.895893f, -2.122508f, -6.752926f, -4.139143f, -42.456753f, -2.089540f, 7.693792f,
	0.056332f, 39.032333f, -0.371549f, -6.404626f, -5.486387f, -36.306255f, -4.266657f, 4.843639f,
	1.169482f, 33.417957f, 0.359338f, -4.199274f, -5.730792f, -30.700884f, -4.262688f, 3.809836f,
	0.593796f, 29.524443f, -0.690191f, -2.455215f, -5.269431f, -27.095976f, -2.626284f, 3.234251f,
	5.802085f, -247.542603f, 8.891689f, 2.911432f, 9.335675f, -115.730728f, 8.261957f, 2.980460f,
	2.353623f, -73.215851f, 10.274137f, 7.501652f, -0.869184f, -51.278362f, 5.547819f, 14.109836f,
	-2.199876f, -40.204872f, 0.409432f, 12.465898f, -4.681235f, -34.176579f, -4.593902f, 7.698077f,
	-5.404052f, -29.925783f, -5.159930f, 4.399647f, -4.849638f, -26.468506f, -2.753460f, 3.075099f,
	-7.271669f, -239.131851f, -1.292117f, -5.880839f, -6.360138f, -119.885681f, -2.770193f, -0.495363f,
	-6.140013f, -79.088730f, -1.493156f, -2.246312f, -7.202691f, -58.652279f, -2.665185f, 0.883309f,
	-6.677571f, -47.447166f, -3.277828f, -1.054099f, -5.642471f, -40.203060f, -2.118620f, -1.374939f,
	-6.403337f, -33.806610f, -2.115823f, -0.560974f, -5.850349f, -29.230169f, -2.016542f, 0.175128f,
	-8.086843f, -244.697586f, -5.401321f, -2.694782f, -15.117500f, -117.230057f, -6.694519f, -0.410316f,
	-6.330461f, -75.210526f, -5.743540f, 0.723983f, -7.830006f, -57.176861f, -6.785739f, 1.602591f,
	-5.472895f, -45.359238f, -4.782669f, 3.017282f, -5.672624f, -39.018303f, -4.102197f, 1.988157f,
	-5.439940f, -32.020050f, -3.499769f, 3.160631f, -5.063907f, -28.212275f, -2.608875f, 3.363857f,
	-0.694036f, 731.053589f, -10.586580f, 5.800574f, 0.566922f, -109.301300f, 4.284991f, 3.016747f,
	-0.189212f, 226.019852f, -11.429324f, -5.533566f, -1.466558f, -48.692822f, 1.420778f, 14.694250f,
	4.024577f, 132.790283f, -0.788153f, -13.712583f, -4.633668f, -32.332600f, -6.513158f, 10.955668f,
	6.930598f, 96.113823f, 2.350914f, -6.119454f, -3.974490f, -24.962254f, -3.311466f, 6.223532f,
	19.434021f, -161.278671f, 13.609263f, 4.668818f, 7.332121f, -69.406380f, 17.571041f, 10.728296f,
	0.231242f, -41.980652f, 3.953051f, 19.282938f, -4.527112f, -30.973192f, -6.392142f, 12.432521f,
	-9.187949f, -161.584595f, -1.709498f, -0.299448f, -7.413230f, -84.409012f, -1.778438f, 0.697255f,
	-5.681454f, -53.904495f, -0.255243f, 2.631422f, -5.547940f, -41.668781f, -1.393229f, -0.340864f,
	-6.650394f, -159.045303f, -1.284871f, -5.389705f, -6.610575f, -80.464371f, -3.666125f, 0.327580f,
	-5.421993f, -53.874855f, -2.657896f, -2.710921f, -4.738738f, -40.551525f, -1.575605f, -1.627288f,
	-3.734160f, -156.420135f, -2.145022f, -0.968857f, -2.651521f, -80.983719f, -1.672755f, -0.584127f,
	-5.116138f, -55.876709f, -2.057833f, -1.406975f, -5.382469f, -41.999660f, -2.217385f, -1.612337f,
	-17.272175f, -165.121643f, -6.956265f, -2.364986f, -6.845009f, -73.488029f, -6.393582f, 0.597289f,
	-7.411861f, -48.131912f, -7.550735f, 3.466208f, -5.937477f, -38.006569f, -5.052328f, 2.753827f,
	-32.653328f, 804.955139f, -13.156660f, 3.468366f, 36.816017f, -49.269341f, 8.300557f, 14.038414f,
	-23.910669f, 250.558365f, 1.184538f, -21.249687f, 27.815670f, -21.882492f, -13.368497f, 13.452347f,
	24.022331f, -109.639420f, 19.238300f, 5.888833f, 5.742887f, -44.384296f, 13.337642f, 25.918001f,
	-10.500463f, -128.664856f, 0.493784f, 2.059961f, -6.559149f, -63.666668f, -2.674458f, 3.254147f,
	-5.014430f, -119.904991f, -2.783976f, 0.040475f, -6.978635f, -59.439186f, -2.208329f, 2.275570f,
	-5.910098f, -119.594086f, -0.356096f, -5.517214f, -6.655715f, -60.194687f, -2.211855f, 1.086029f,
	-7.273142f, -118.021812f, -2.743153f, -0.994007f, -7.103985f, -59.152420f, -3.150389f, -0.518800f,
	1.678572f, -125.149673f, -1.152006f, -1.696634f, -8.321596f, -64.357765f, -3.556915f, -1.086929f,
	-22.533720f, -114.598465f, -10.604239f, 0.160655f, -8.385529f, -56.484623f, -10.503914f, 3.645498f,
	5.029788f, 835.666321f, -18.870632f, 0.551033f, 4.846066f, -24.047268f, 5.783925f, 27.934345f,
};
*/

//функция:		void NcScaleDependOnTime(...)
//назначение:	масштабирование выборки по времени
//описание:		вычисляем координаты рукописного образа через равные интервалы времени
//параметры:	points - [in]  выборка из произвольного числа элементов (исходные координаты)
//				count  - [in]  число элементов в выборке (количество исходных координат)
//				timeReck - [in] исходные отсчёты времени
void NcScaleDependOnTime ( UINT count, const POINT *points, INT *timeReck, int newcount, POINT *dest )
{
	// если существуют два разных отсчёта, то увеличиваем последний на 1 милисекунду
	for( unsigned i = 0; i < count; i++ ) {
		if ( timeReck[i] == timeReck[i+1] ) timeReck[i+1]++;
	}

	// новые отсчёты времени через NCTIME_STEP милисекунд
	INT *newTimeReck = new INT [newcount];
	newTimeReck[0] = timeReck[0];
	for( int i = 1; i < newcount; i++ ) {
		newTimeReck[i] = newTimeReck[i-1] + NCTIME_STEP;
	}

	// первые и последние координаты оставляем без изменения
	dest[0].x = points[0].x;
	dest[0].y = points[0].y;
	dest[newcount-1].x = points[count-1].x;		
	dest[newcount-1].y = points[count-1].y;		

	// начальный момент времени для интервала newTimeReck[0]
	// начальная точка для интервала i : dest[0].x

	float l1, l2, t1, t2;	// переменные, использующиеся при вычислении новых координат

	// i - для перемещения по новому массиву координат
	// j - для перемещения по старому массиву координат
	for( int i = 1, j = 1; i < newcount-1; i++ ) 
	{
		while ( timeReck[j] < newTimeReck[i] ) {
			j++;
		}

		if ( timeReck[j] == newTimeReck[i] ) {
			dest[i].x = points[j].x;
			dest[i].y = points[j].y;
			continue;
		}
		// вычисление новой координаты x
		t1 = (float)abs(newTimeReck[i-1]-timeReck[j]);	
		l1 = (float)(dest[i-1].x - points[j].x);
		t2 = t1 - (newTimeReck[i]-newTimeReck[i-1]);
		l2 = (l1*t2)/t1;
		l2 = roundUp (l2);
		dest[i].x = (LONG)l2 + points[j].x;		

		// вычисление новой координаты y
		l1 = (float)(dest[i-1].y - points[j].y);
		t2 = t1 - (newTimeReck[i]-newTimeReck[i-1]);
		l2 = (l1*t2)/t1;
		l2 = roundUp (l2);
		dest[i].y = (LONG)l2 + points[j].y;		
	}

	delete [] newTimeReck;

}

//функция:		void NsScale2X512(const POINT *points, int count, POINT *dest)
//назначение:	масштабирование выборки до 512 элементов (кол-во эл-тов <512)
//описание:		Применяется линейная интерполяция между соседними элементами,
//				первый и последний элемент остаются без изменений
//				(если число элементов больше NSSCALE_SIZE, то используются
//				только NSSCALE_SIZE элементов, равномерно распред. в массиве)
//параметры:	points - [in]  выборка из произвольного числа элементов
//				count  - [in]  число элементов в выборке
//				dest   - [out] результирующая выборка из 512 элементов
void NcScale2X512(const POINT points[], UINT count, POINT dest[])
{
	if (!points || !dest || count < 2 /*|| count > NCSCALE_SIZE*/)
		return;

	float scale = count/(float)NCSCALE_SIZE;	// коэффициент масштабирования
	float rel = 0.0f;							// идеальный номер элемента в points

	// Цикл масштабирования
	for(int i = 1; i < NCSCALE_SIZE-1; i++)
	{
		rel += scale;
		//Вычисление целочисленных индексов, близких к rel
		int l = (int)rel;						// меньший индекс
		int r = (int)rel + 1;					// больший индекс
		// Вычисление масштабированных координат (линейная интерполяция)
		if( r < (int)count) {
			dest[i].x = (LONG)((rel - l)*points[r].x + (r - rel)*points[l].x);
			dest[i].y = (LONG)((rel - l)*points[r].y + (r - rel)*points[l].y);
		} else {
			dest[i].x = (LONG)((rel - l)*points[count-1].x + (r - rel)*dest[i-1].x);
			dest[i].y = (LONG)((rel - l)*points[count-1].y + (r - rel)*dest[i-1].y);
		}
	}

	// Первые и последние координаты остаются без изменений
	dest[0].x = points[0].x;
	dest[0].y = points[0].y;
	dest[NCSCALE_SIZE-1].x = points[count-1].x;
	dest[NCSCALE_SIZE-1].y = points[count-1].y;
}

//функция:		void NsFourier2XCalc(POINT *points, int count, float *coeffs, int coeffcount)
//назначение:	Вычисление коэффициентов ряда фурье для заданной двумерной выборки
//параметры:	points	   - [in] массив элементов с двухмерной выборкой
//				count	   - [in] количество элементов в каждой выборке
//				coeffs	   - [out]указатель на массив коэффициентов ряда Фурье
//				coeffcount - [in] количество вычисляемых коэффициентов уменьшенное в 4 раза
void NcFourier2XCalc(POINT points[], UINT count, float coeffs[], int coeffcount)
{
	//контроль входных значений
	if (!points || !coeffs)
		return;

	//(кол-во эл-тов принимает значения 512, 256, 170, 128,
	//кол-во элементов в таблице 512
	//поэтому нужно промасштабировать кол-во эл-тов до размера таблицы)

	float xcos = 0, xsin = 0, ycos = 0, ysin = 0;//значения коэф. sin и cos
float arr1[512], arr2[512], arr3[512], arr4[512];
	//цикл вычисления коэффициентов функции
	for(int i = 1; i <= coeffcount; i++)
	{
		//цикл суммирования
		for(unsigned j = 0; j < count; j++)
		{
			float dArg = (float)j*i/count;
			float dsin = sin(dArg*2*3.14f);
			float dcos = cos(dArg*2*3.14f);
			
			xcos += points[j].x * dcos;
			xsin += points[j].x * dsin;
			ycos += points[j].y * dcos;
			ysin += points[j].y * dsin;
      arr1[j] = xcos;
      arr2[j] = xsin;
      arr3[j] = ycos;
      arr4[j] = ysin;
		}
		//нахождение среднего значения
		xcos /= count;
		xsin /= count;
		ycos /= count;
		ysin /= count;
		//сохранение коэффициентов
		coeffs[0] = xcos;
		coeffs[1] = xsin;
		coeffs[2] = ycos;
		coeffs[3] = ysin;
		//перемещение указателя
		coeffs += 4;
	}
}

//функция:		void NsFourier2X416(POINT *points, float *coeffs)
//назначение:	Преобразование Фурье для двумерной выборки из 512 элементов
//				к функции с 416 коэффициентами
//параметры:	points		- [in] выборка из 512 элементов
//				coeffs		- [out]выходной массив коэффициентов
void NcFourier2X416(POINT points[], float coeffs[])
{
	//контроль входных параметров
	if (!points || !coeffs)
		return;

	POINT	buff[NCSCALE_SIZE + NCSCALE_SIZE/2];//массив для хранения временных координат
	float	*pcur = coeffs;						//указатель на позицию, в которую записываются новые коэфф.

	//заполнение массива buff = [512 эл-тов points][256 нач. эл-тов points]
	//	копирование исходных данных
	::memcpy(buff, points, NCSCALE_SIZE*sizeof(POINT));
	//	дублирование начала выборки в конец массива для расчета без доп. перемещений
	::memcpy(buff + NCSCALE_SIZE, points, (NCSCALE_SIZE/2)*sizeof(POINT));

	//вычисление коэффициентов Фурье для разных частей выборок
	//	вычисление коэффициентов на половине выборки
	int i;
	for ( i = 0; i < 2; i++ ) {
		NcFourier2XCalc(buff+i*(NCSCALE_SIZE/2),NCSCALE_SIZE,pcur,16);
		pcur += 16*4;
	}
	//	вычисление коэффициентов на четверти выборки
	for ( i = 0; i < 4; i++ ) {
		NcFourier2XCalc(buff+i*(NCSCALE_SIZE/4),NCSCALE_SIZE/2,pcur,8);
		pcur += 8*4;
	}
	//	вычисление коэффициентов на шестой части выборки
	for ( i = 0; i < 6; i++ ) {
		NcFourier2XCalc(buff+i*(NCSCALE_SIZE/6),(NCSCALE_SIZE/3),pcur,4);
		pcur += 4*4;
	}
	//	вычисление коэффициентов на восьмой части выборки
	for ( i = 0; i < 8; i++ ) {
		NcFourier2XCalc(buff+i*(NCSCALE_SIZE/8),NCSCALE_SIZE/4,pcur,2);
		pcur += 2*4;
	}
	// после выполнения всех операций, массив coeffs  
	// заполнен 416 значениями коэффициентов
	// 416 = 16*4*2 + 8*4*4 + 4*4*6 + 2*4*8
}

//функция:		void Normalize416(float *coeffs)
//назначение:	Нормирование элементов ряда Фурье и масштабирование к 3000
//параметры:	coeffs	- [in/out] массив из 416 коэффициетов
void NcNormalize416 ( float coeffs[] )
{
	if (!coeffs) 
		return;

	// вычисление суммы всех коэффициентов Фурье (по модулю)
	float sum = 0.0;
	int i;
	for ( i = 0; i < NCFOURIER_COUNT; i++ ) {
		float value = coeffs[i];
		if ( value > 0 ) sum += value; else sum -= value;
	}
	//вычисление коэффициента нормирования
	float norm = 3000.0f/sum;
	//вычисление нормированных коэффициентов Фурье
	//с вычитанием мат. ожидания чужого
	for ( i = 0; i < NCFOURIER_COUNT; i++ ) {
		coeffs[i] = coeffs[i]*norm - tableMo[i];
	}
}

//функция:	  void NcCalcCoefX2416(...)
//назначение: преобразование входных элементов/координат в функционалы
//описание:	  вначале входные координаты масштабируются по времени, получаем 
//			  равномерно распределённые по времени координаты; затем масштабируем
//			  до 512 коэффециентов; вычисляем коэффециенты Фурье и осуществляем 
//		      нормирование полученных коэффециентов
//параметры:  count    - [in]  число элементов в выборке (кол-во точек/координат)
//			  points   - [in]  выборка из произвольного числа элементов (точек/координат)
//			  timeReck - [in]  отсчёты времени в которые берутся исходные элементы/координаты 
//			  coeffs   - [out] массив из 416 коэффициентов 
void NcCalcCoefX2416 ( UINT count, POINT points[], UINT timeReck[], float coeffs[] )
{
	// Масштабирование считанных координат по времени
	int tcoordCount  = 
		(timeReck[count-1]-timeReck[0])/NCTIME_STEP + 2; // новое количество координат
	if (tcoordCount < 0) return;

	// Промасштабированные координаты
	POINT *scoord = new POINT [NCSCALE_SIZE]; 

	if ( tcoordCount == 2 ) // т.е. используются образы без отсчётов времени
	{
		// Масштабирование считанных координат по размеру(количеству) 
		NcScale2X512(points, count, scoord);
	} 
	else					// используются образы со временем
	{
		// Новые координаты через равные отсчёты времени
		POINT *tcoord = new POINT [tcoordCount];			 
		// Масштабирование по времени
		NcScaleDependOnTime(count, points, (INT*)timeReck, tcoordCount, tcoord);

		// Масштабирование считанных координат по размеру(количеству) 
		NcScale2X512(tcoord, tcoordCount, scoord);
		
		delete [] tcoord;
	}

//////////////////////////////////////////////////////////////////////////
/*	// ВРЕМЕННАЯ ВЕРСИЯ ПОСЛЕ РАБОТЫ ТУТ ЖЕ УДАЛИТЬ!!!
	// сохраняем промасштабированные образы в один файл
	FILE *stream;
	long lErr = ERROR_SUCCESS;	// код ошибки
	_wfopen_s(&stream, TEXT("D:\\AfterScalImg50.dat"), TEXT("ab"));
	for ( int i = 0; i < NCSCALE_SIZE; i++ ) {
		fprintf (stream, "%d\t%d\n", scoord[i].x, scoord[i].y);
	}
	fprintf(stream, "%d\t%d\n", -1, -1);
	fclose(stream);
*/
//////////////////////////////////////////////////////////////////////////

	// Преобразование Фурье масштабированных координат
	NcFourier2X416(scoord, coeffs);

	// Нормализация коэффициентов Фурье
	NcNormalize416(coeffs);
	
	delete [] scoord;

//////////////////////////////////////////////////////////////////////////
/*	// ВРЕМЕННАЯ ВЕРСИЯ ПОСЛЕ РАБОТЫ ТУТ ЖЕ УДАЛИТЬ!!!
	// сохраняем коэффициенты в один файл
	FILE *stream;
	long lErr = ERROR_SUCCESS;	// код ошибки
	_wfopen_s(&stream, TEXT("D:\\AllCoef210.dat"), TEXT("ab"));
	for ( int i = 0; i < NCFOURIER_COUNT; i++ ) {
		fprintf (stream, "%f\n", coeffs[i]);
	}
	fclose(stream);
*/
//////////////////////////////////////////////////////////////////////////

}

// Вычисление коэффициентов Фурье для массива координат с ноликами
// count     - [in] число координат
// coord     - [in] исходные координаты
// timeReck  - [in] отсчёты времени
// coeffs    - [out] массив из 416 коэффициентов
void NcCalcCoefZero2416 ( BNCSIGNIMAGE img, float coeffs[] )
{
	POINT *fcoord = new POINT [img.m_Num];		// массив координат без ноликов
	UINT  *fTime  = new UINT  [img.m_Num];		// отсчёты без ноликов
	UINT  fcoordCount = 0;						// количество координат без ноликов
	// Запись координат без ноликов в массив
	for ( unsigned iCount = 0; iCount < img.m_Num; iCount++ )	
	{
		if ( img.m_X[iCount] != 0 && img.m_Y[iCount] != 0) 
		{
			fcoord[fcoordCount].x = img.m_X[iCount];
			fcoord[fcoordCount].y = img.m_Y[iCount];
			fTime[fcoordCount] = img.m_T[iCount];
			fcoordCount++;
		}
	}	
	// Вычисление коэффициентов Фурье
	NcCalcCoefX2416 ( fcoordCount, fcoord, fTime, coeffs );	// с учётом времени





	delete [] fcoord;
	delete [] fTime;
}

// Вычисление коэффициентов Фурье группы рукописных образов
void NcCalcImagesCoef ( UINT count, const BNCSIGNIMAGE images[], float coeffs[] )
{
	float *fourierArr = new NCFOURIER;	// коэффициенты Фурье i-го образа

	for ( unsigned iCount = 0; iCount < count; iCount++ ) {
		// Вычисление коэффициентов Фурье i-го образа
		NcCalcCoefZero2416 ( images[iCount], fourierArr );

		std::ofstream out;          // поток для записи
		out.open("D:\\hello" + std::to_string(iCount) + ".txt"); // окрываем файл для записи
		if (out.is_open())
		{
			for (size_t i = 0; i < 416; i++)
			{
				out << fourierArr[i] << std::endl;
			}

		}
		// Запись коэффициентов i-го образа в общий массив
		memcpy ( coeffs + iCount*NCFOURIER_COUNT, fourierArr, NCFOURIER_COUNT*sizeof(float) );
		
		//тут
	}

//////////////////////////////////////////////////////////////////////////
	//float ARR[2715];
	//for (int i = 0; i < NCFOURIER_COUNT; i++)
	//{
	//	for ( int j = 0; j < count; j++)
	//	{
	//		ARR[j] = coeffs[j*NCFOURIER_COUNT+i];
	//	}
	//	int io = 0;
	//}
//////////////////////////////////////////////////////////////////////////

	delete [] fourierArr;
}

