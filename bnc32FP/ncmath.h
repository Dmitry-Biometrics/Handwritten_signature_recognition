//file:			ncmath.h
//				Математический модуль для
//				рассчета нейронных сетей


#ifndef _NCMATH_H
#define _NCMATH_H

#include <math.h>
#include "bnc32.h"

// Функция округления чисел, округляет дробные числа до целых
float roundUp ( float x );

//назначение: Вычисление корреляции
//описание:   Вычисление корреляции между двумя входными векторами
//параметры:  count - [in]  количество элементов массива coefs
//			  coefs - [in]  анализируемый массив (например выходы нейрона на всех тестовых образах)
// возвращает вычисленную корреляцию двух векторов
float CalcCorr ( unsigned count, const float coefs1[], const float coefs2[] );

// Строим гистограмму распределения вероятностей появления ноликов и единичек 
// на выходах нейронов однослойной сети (в гистограмме 10 столбиков: 0 - 0,1, ... 0,9 - 1)
// probArr	- [in]	распределение вероятностей появления (i-й элемент - вероятность 
//					появления нолика на i-м нейроне)
// hist		- [out]	в i-ю ячейку записывается номер группы/столбика i-го нейрона 
void PlotHist ( float probArr[], int hist[] );

// Вычисляем стойкость к атакам подбора
// Вычисление вероятности возникновения ошибки второго рода 
// по выходному качеству мер Хемминга
// fqual - [in] качество мер Хемминга
// Возвращает Х, где Х следует интерпретировать следующим образом:
// стойкость равна е-Х
float Quality2Stab ( float fqual );

// Чтение бита с заданным номером
//параметры: source - [in] Указатель на область памяти
//			 index	- [in] Смещение в битах от начала памяти
//результат: значение бита
int getbit(const void* source, int index);

// Установка бита с заданным номером
//параметры: source - [in] Указатель на область памяти
//			 index  - [in] Смещение в битах от начала памяти
//			 bit	- [in] Устанавливаемое значение бита (1 или 0)
void setbit(void* source, int index, int bit);

// Подсчет количества отличающихся битов
unsigned getbitdiffs(const void *src1, const void *src2, unsigned count);

//назначение: Вычисление математического ожидания, дисперсии и качества 
//			  для набора веществ. чисел
//описание:   Вычисление числовых характеристик входных/выходных данных сети
//			  для count векторов с 1 параметром (в одном векторе 1 элемент)
//параметры:  count - [in]  количество элементов массива coefs
//			  coefs - [in]  одномерный массив элементов на котором вычисляется матожидание и качество
//			  params - [out] вычисленные матожидание, дисперсия и качество
void fadq ( unsigned count, const float coefs[], BNCMOMENTS &params );

//назначение: Вычисление математического ожидания, дисперсии и качества 
//			  для набора целых чисел
//описание:   Вычисление мат.ожидания, дисперсии и качества мер Хемминга
//параметры:  count - [in]  количество элементов массива coefs
//			  coefs - [in]  одномерный массив значений мер Хемминга
//			  params - [out] вычисленные матожидание, дисперсия и качество
void fadq ( unsigned count, const int coefs[], BNCMOMENTS &params );

//назначение: Вычисление мат.ожидания, дисперсии и качества на входе/выходе
//описание:	  Вычисление математического ожидания, дисперсии и качества для 
//			  нескольких выборок вещественных чисел, расположенных 
//			  последовательно в массиве coefs.
//			  Вычисление характеристик i-го элемента проводится на основе i-х
//			  элементов выборок
//примечание:
//			размеры массивов average, disp, quality должен быть не меньше shift
//параметры:  count - [in]  количество выборок (количество образов)
//			  step  - [in]  смещение до каждой следующей выборки (размер выборки) (количество коэффициентов в одном образе)
//			  coefs - [in]  массив элементов (входные коэффициенты размер count Х step)
//			  aver  - [out] мат. ожидание \
//			  disp  - [out] дисперсия	  -- каждого коэффициента
//			  qual  - [out] качество	  /
void fadq ( unsigned count, unsigned step, const float coefs[], float aver[], float disp[], float qual[] );

// Вычисление среднего значения элементов входного массива
// count - [in] количество элементов массива А
// A	 - [in] анализируемое множество
float mean ( unsigned count, float A[] );

#endif