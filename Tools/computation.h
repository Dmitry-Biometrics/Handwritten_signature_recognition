// Математический модуль 

#ifndef _COMPUT_H
#define _COMPUT_H

#include "../NCTestProj/bnc32.h"

//назначение: Вычисление математического ожидания, дисперсии и качества 
//			  для набора целых чисел
//описание:   Вычисление мат.ожидания, дисперсии и качества мер Хемминга
//параметры:  count - [in]  количество элементов массива coefs
//			  coefs - [in]  одномерный массив значений мер Хемминга
//			  params - [out] вычисленные матожидание, дисперсия и качество
void fadq ( unsigned count, const int coefs[], BNCMOMENTS &params );

//назначение: Вычисление мат.ожидания, дисперсии и качества на входе/выходе
//описание:	  Вычисление математического ожидания, дисперсии и качества для 
//			  нескольких выборок вещественных чисел, расположенных 
//			  последовательно в массиве coefs.
//			  Вычисление характеристик i-го элемента проводится на основе i-х
//			  элементов выборок
//примечание:
//			размеры массивов average, disp, quality должен быть не меньше shift
//параметры:  count - [in]  количество выборок (количество образов)
//			  step  - [in]  смещение до каждой следующей выборки (размер выборки) (количество коэффициентов в одном образе)
//			  coefs - [in]  массив элементов (входные коэффициенты размер count Х step)
//			  aver  - [out] мат. ожидание \
//			  disp  - [out] дисперсия	  -- каждого коэффициента
//			  qual  - [out] качество	  /
void fadq ( unsigned count, unsigned step, const float coefs[], float aver[], float disp[], float qual[] );

// Вычисляем минимальное значение массива
// возвращает минимальное значение
int fminElem ( unsigned count, const int coefs[] );
float fminElem ( unsigned count, const float coefs[] );

// Вычисляем максимальное значение массива
// возвращает максимальное значение
int fmaxElem ( unsigned count, const int coefs[] );

// Вычисляем математическое ожидание массива
// возвращает среднее значение
float faverElem( unsigned count, const float coefs[] );

// Вычисляем количество "взломов" системы, т.е. кол-во мер == 0
// возвращает кол-во мер Хемминга равных нулю
int fzeroXem ( unsigned count, const int coefs[] );

// Вычисляем стойкость к атакам подбора
// fqual - [in] вычисленное при моделировании качество мер Хемминга
// Возвращаемое значение Х следует интерпретировать следующим образом:
// стойкость системы к атакам подбора равна 10 в степени Х 
float Qual2Stab ( float fqual );

// Функция округления чисел, округляет дробные числа до целых
int roundUp ( float x );

// Передаём управление виндовсу, чтобы он перерисовал окно
void DelegateFun();

#endif